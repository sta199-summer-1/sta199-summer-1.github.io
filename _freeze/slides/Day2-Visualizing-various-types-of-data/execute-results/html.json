{
  "hash": "d6fe30f8e4dd4ec22d701580e8cb056d",
  "result": {
    "markdown": "---\ntitle: \"Visualizing various types of data\"\nsubtitle: \"Day-2\"\ndate: \"May 18th 2023\"\nformat: revealjs\n---\n\n\n## Checklist\n\n\n::: {.cell}\n\n:::\n\n\n-- Go to the course [GitHub org](https://github.com/sta199-summer-1) and find your `ae-02-summer` (repo name will be suffixed with your GitHub name).\n\n-- If you don't see it, you did not fill out the Getting to Know you Survey; Talk to me after class so we can get you squared away\n\n-- Clone the repo in your container, open the Quarto document in the repo (as we did with ae-01)\n\n-- Are you on Slack?\n\n## Announcements\n\nDue Dates + Turn In\n\n-- All AEs are due Friday night by 11:59 - GitHub\n\n-- Labs due Thursday and Monday (before lecture)- Gradescope\n\n-- HWs due ~ 1 week from assigned - Gradescope\n\n## How to turn AE's via Github \n\nAEs will be graded via Week 2\n\n-- render, commit, and push\n\n1.  If you made any changes since the last render, render again to get the final version of the AE.\n\n2.  Check the box next to each document in the Git tab (this is called \"staging\" the changes). Commit the changes you made using an simple and informative message.\n\n3.  Use the **green arrow** to push your changes to your repo on GitHub.\n\n4.  Check your repo on GitHub and see the updated files. Once your updated files are in your repo on GitHub, you're good to go!\n\n## How to turn AE's via Github \n\n-- ae-01 Demo\n\n## Announcements\n\n-- Prepare Material\n\n## Goals for today\n\nCreate plots!\n\n-- Understand `geoms`\n\n-- Scatterplots, boxplots, histograms, etc\n\n-- Practice with the fundamentals of ggplot\n\n## Tips and Tricks\n\n-- Let the types of variables dictate the plot\n\n-- Informative title\n\n-- Axes should be labeled\n\n-- Careful consideration of aesthetic choices (like color)\n\n## The process (A Warm Up)\n\nYou have a data set you want to work with...\n\n`mtcars`\n\n## The process (A Warm Up)\n\nWhat does the following code below achieve? \n\n|     `mtcars |>`\n|         `ggplot()`\n\n\n## The process (A Warm Up)\n\nThis code sets up our canvas to create!\n\n|     `mtcars |>`\n|         `ggplot()`\n\n![](images/04-Visualizing-various-types-of-data/canvas.jpg){width=\"400\" height=\"400\" fig-align=\"center\"}\n\n\n## The process (A Warm Up)\n\nWhat does the following code below achieve? \n\n|     `mtcars |>`\n|         `ggplot(`\n|         `aes(`\n|              `x = variable.name, y = variable.name)`\n|                `)`\n\n\n\n## The process (A Warm Up)\n\n\n|     `mtcars |>`\n|         `ggplot(`\n|         `aes(`\n|              `x = variable.name, y = variable.name)`\n|                `)`\n\naes: describe how variables in the data are mapped to your canvas\n\n\n## The process (Warm Up)\n\nWhat does the following code below achieve? \n\n|     `mtcars |>`\n|         `ggplot(`\n|         `aes(`\n|              `x = variable.name, y = variable.name)`\n|                `)` +\n|         `geom_point()`\n\n\n\n## The variables dictate the plot\n\n-- Two quantitative variables\n\n-- One quantitative variable\n\n-- One categorical variable\n\n-- Two categorical variables\n\n# geom reference\n\nhttps://ggplot2.tidyverse.org/reference/\n\n**A geom is the geometrical object that a plot uses to represent data. People often describe plots by the type of geom that the plot uses. For example, bar charts use bar geoms, line charts use line geoms, boxplots use boxplot geoms, and so on. Scatterplots break the trend; they use the point geom.**\n\n## ae-02-s23\n\nThese data were collected from 2007 - 2009 by Dr. Kristen Gorman with the Palmer Station Long Term Ecological Research Program, part of the US Long Term Ecological Research Network. The data were imported directly from the Environmental Data Initiative (EDI) Data Portal, and are available for use by CC0 license (\"No Rights Reserved\") in accordance with the Palmer Station Data Policy.\n\n\n# ae-02-s23\n\n## We can make plots.... \n\nBut how do we talk about them? \n\n## General Rules \n\n-- Look for patterns \n\n-- Look at `shape` \n\n-- Look for outliers or anything unusual \n\n-- Look for `spread` of the data\n\n## Shape\n\nWe often talk about skew when describing shape of data\n\n-- Positive Skew (Right Skew)\n\n-- Negative Skew (Left Skew)\n\n-- Roughlyl Symmentric\n\n![](images/skew.png){fig-align=\"center\"}\n\n## Outliers\n\nA data point that does not follow the general trend of the data\n\n![](images/boxplot.out.png){fig-align=\"center\"}\n\n## Center\n\n-- What's the mean\n\n-- What's the median\n\n## Spread (More Coming Later!)\n\nHow spread out things are...\n\n-- Standard deviation\n\n-- IQR\n\n\n## Recap of AE {.smaller}\n\n-   Pick geoms based on data types.\n\n-   Manipulate graphs to be more appropriate with arguments\n\n-   Take control of your labels\n\n-   Use color to your advantage. https://ggplot2.tidyverse.org/reference/ggtheme.html & \\n https://ggplot2.tidyverse.org/reference/scale_viridis.html\n",
    "supporting": [
      "Day2-Visualizing-various-types-of-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}