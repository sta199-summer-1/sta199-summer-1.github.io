{
  "hash": "2cac867ec400c3f27e9648554fd7decd",
  "result": {
    "markdown": "---\ntitle: \"Working with multiple data frames\"\nsubtitle: \"Lecture 6\"\ndate: \"February 1st, 2023\"\nformat: revealjs\n---\n\n\n## Checklist\n\n\n::: {.cell}\n\n:::\n\n\n-- Clone ae-05\n\n-- Make sure you are keeping up with **Preperation Videos**\n\n-- If you need to turn HW in late, see late policy \n\n-- If you have extenuating circumstances (see syllabus), contact Ed. \n\n\n## Announcements\n\nVideos\n\n-- Requesting videos for missed classes\n\nHomework + Labs\n\n-- Late work policy\n\n-- Drop 1\n\n## Announcements\n\nExam \n\n-- February 10th \n\n-- Take home\n\n-- Open Notes / Internet / etc\n\n## Exam \n\n-- Coding + Short answer questions \n\n-- Extension questions \n\n-- Can NOT be late \n\n-- Pull -> Commit -> Push after every question\n\n## Announcements\n\nUpdates to deadlines \n\n-- More time for labs (1 week: Tuesday -> Tuesday)\n\n-- Homework (1 week: Wednesday -> Wednesday)\n\n-- Subject to change around Exam time / holiday / etc\n\n## Announcements\n\n-- A lot of errors happen when coding (and that's okay)\n\n## Warm Up \n\nGlimpse `mtcars` if you need to refamilarize yourself with these data\n\n\n```\nmtcars |>\n  summarize(mean_mpg = mean(mpg))\n  \n---------------------------------\nmtcars |>\n  mutate(cyl = factor(cyl)) |>\n  group_by(cyl) |>\n  summarize(mean_mpg = mean(mpg))\n```\n\n## Warm Up{.smaller} \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nmtcars |>\n  summarize(mean_mpg = mean(mpg))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  mean_mpg\n1 20.09062\n```\n:::\n\n```{.r .cell-code}\nmtcars |>\n  mutate(cyl = factor(cyl)) |>\n  group_by(cyl) |>\n  summarize(mean_mpg = mean(mpg))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  cyl   mean_mpg\n  <fct>    <dbl>\n1 4         26.7\n2 6         19.7\n3 8         15.1\n```\n:::\n:::\n\n\n\n## Goals\n\n-- Understand join functions\n\n-- Join multiple data frames\n\n## Motivation \n\nMessy data\n\n-- The sheer volume of information is sometimes referred to as “messy” data, because it's hard to make sense of it all. \n\n## Messy data \n\n![](images/join-motivation.png){width=\"950\" height=\"550\" fig-align=\"center\"}\n\n# How? \n\n## Joining datasets\n\n**Data merging** is the process of combining two or more data sets into a single data set. Most often, this process is necessary when you have raw data stored in multiple files, worksheets, or data tables, that you want to analyze together.\n\n## Joining datasets \n\n-- Left Join \n\n-- Inner Join \n\n-- Right Join \n\n-- Full Join\n\n## Joining datasets \n\n![](images/join.png){width=\"950\" height=\"500\" fig-align=\"center\"}\n\n\n## AE-05\n\nClone ae-05\n\n## Recap of AE\n\n-- This is important! Data are messy!\n\n-- Think carefully about the join you use\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}