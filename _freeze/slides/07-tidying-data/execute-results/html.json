{
  "hash": "5a7c1bef8dcee68fa4e72124321c11e5",
  "result": {
    "markdown": "---\ntitle: \"Pivot + Tidying data\"\nsubtitle: \"Lecture 7\"\ndate: \"Feburary 3rd, 2023\"\nformat: revealjs\n---\n\n\n## Checklist\n\n\n::: {.cell}\n\n:::\n\n\n-   Clone your `ae-06` project in RStudio\n\n-   Lab 2 due **Tuesday** 2-7\n\n-   Don't work on Lab-2 during Lab-3\n\n-   Groups are coming after Exam 1.\n\n## Announcements \n\n-- Data Wrangling Practice \n\n-- Exam 1 - Feb 10th \n\n-- Friday Review (Survey Coming on Sakai)\n\n## Goals:\n\n-- ggplot practice\n\n-- Practice re-creating graphs\n\n-- Understand `pivot_longer`\n\n-- Understand `pivot_wider`\n\n\n## Warm Up{.smaller}\n\n-- In ae-06 project, open up ae-05-fisheries.qmd. \n\n-- Run every code chunk up until: **Warm up starts here!**\n\n-- Recreate the following plot below using the `fisheries_summary` data set.\n\n![](images/aquaculture-production-by-continent.png){width=\"950\" height=\"450\" fig-align=\"center\"}\n\n## Data Format (Wide vs Long)\n\n-- **Wide** data contains values that do not repeat in the first column\n\n-- **Long** data contains values that do repeat in the first column\n\n![](images/wide_and_long.png){width=\"950\" height=\"450\" fig-align=\"center\"}\n\n## Data Format (Wide vs Long)\n\n-- Which have we typically used to create plots in this class?\n\n![](images/wide_and_long.png){width=\"950\" height=\"450\" fig-align=\"center\"}\n\n## Tidy Data\n\nThere are three interrelated rules that make a dataset tidy:\n\n-   **Each variable is a column; each column is a variable.**\n\n-   **Each observation is row; each row is an observation.**\n\n-   Each value is a cell; each cell is a single value.\n\n## Motivation\n\n-- Sometimes, data are not in this format...\n\n## pivots\n\n-- `pivot_longer`\n\n-- `pivot_wider`\n\n# pivot_wider\n\n## pivot_wider{.smaller}\n\n--  Making tables for quick comparison / display purposes \n\n-- `names_to`\n\n-- `values_to`\n\n![](images/pivot-wider.png){width=\"950\" height=\"500\" fig-align=\"center\"}\n\n# Application exercise\n\n## Goal \n\n![](images/statsci-plot.png){width=\"950\" height=\"500\" fig-align=\"center\"}\n\n\n## Recap of AE {.smaller}\n\n-   When pivoting longer, variable names that turn into values are characters by default. If you need them to be in another format, you need to explicitly make that transformation, which you can do so within the `pivot_longer()` function.\n\n-   You can tweak a plot forever, but at some point the tweaks are likely not very productive. However, you should always be critical of defaults (however pretty they might be) and see if you can improve the plot to better portray your data / results / what you want to communicate.\n\n-   `pivot_wider()` which makes data sets wider by increasing columns and reducing rows. `pivot_wider()` has the opposite interface to pivot_longer(): we need to provide the existing columns that define the values (values_from) and the column name (names_from).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}