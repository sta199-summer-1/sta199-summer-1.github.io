{
  "hash": "6f1c7910c1c31d042df50d703786853f",
  "result": {
    "markdown": "---\ntitle: \"Joins + Tidy Data\"\nsubtitle: \"Day 5\"\ndate: \"May 25th, 2023\"\nformat: revealjs\n---\n\n\n## Checklist\n\n\n::: {.cell}\n\n:::\n\n\n-- Clone ae-05\n\n-- Make sure you are keeping up with **Preparation Videos**\n\n-- HW-1 due Monday (29th at 11:59 PM)\n\n-- Lab-1 due Today (25th at 11:59 PM) <- We will talk about this deadline\n\n-- All AEs for this week due Friday (26th at 11:59 PM)\n\n## Lab 2 Announcement\n\n-- Group Formation\n\n-- 3-4 students\n\n-- GitHub is a tool for collaboration\n\n-- It is a skill to be able to communicate and work together on common projects\n\n## Warm up - Joins\n\n![](images/joinprac.png){fig-align=\"center\"}\n\n-- `left_join(x,y)`; `right_join(x,y)`; `full_join(x,y)`\n\n## Function of the day\n\n`if_else`\n\n-- If this, do this, else this\n\n-- Commonly used to create new variables\n\n## Function of the day\n\n![](images/slicecars.png){fig-align=\"center\"}\n\n\n## Function of the day\n\n![](images/ifslicecars.png){fig-align=\"center\"} \n\nNew column added\n\n\n# Bonus Function\n\n`fct_reorder`\n\n![](images/fct_reorder_no.png){fig-align=\"center\"}\n\n \n## Function of the day (Bonus!)\n\n    iris |>\n      ggplot(\n      aes(x = fct_reorder(Species, Sepal.Width), y = Sepal.Width)\n    ) + \n      geom_boxplot()\n      \n\n![](images/fct_reorder_yes.png){fig-align=\"center\"}\n\n\n## Goals\n\n-- Finish Joins\n\n-- Define `Tidy Data`\n\n-- Play with `pivot` functions in R\n\n# ae-05\n\n## Data Format (Wide vs Long)\n\n-- **Wide**  data contains values that do not repeat in the first column. Also called \"unstacked\". Tabular format.  \n\n-- **Long** data contains values that do repeat in the first column. Each row is a single observation of a particular group. \n\n![](images/wide_and_long.png){width=\"950\" height=\"450\" fig-align=\"center\"}\n\n## Data Format (Wide vs Long)\n\n-- Which have we typically used to create plots in this class?\n\n![](images/wide_and_long.png){width=\"950\" height=\"450\" fig-align=\"center\"}\n\n## Tidy Data\n\nThere are three interrelated rules that make a dataset tidy:\n\n-   **Each variable is a column; each column is a variable.**\n\n-   **Each observation is row; each row is an observation.**\n\n-   Each value is a cell; each cell is a single value.\n\nThis typically describes long data \n\n## Motivation\n\n-- Sometimes, data are not in this format...\n\n## pivots\n\n-- `pivot_longer`\n\n-- `pivot_wider`\n\n# pivot_wider\n\n## pivot_wider {.smaller}\n\n-- Making tables for quick comparison / display purposes\n\n-- `names_to`\n\n-- `values_to`\n\n![](images/pivot-wider.png){width=\"950\" height=\"500\" fig-align=\"center\"}\n\n## Pivot Motivation \n\nLook at points by game\n\n![](images/port.png){}\n\n\n## ae-summary\n\n## Recap of AE {.smaller}\n\n-   There are many different types of joins. Think critically about your goal in order to decide which join you should use.\n\n-   When pivoting longer, variable names that turn into values are characters by default. If you need them to be in another format, you need to explicitly make that transformation, which you can do so within the `pivot_longer()` function.\n\n-   `pivot_wider()` which makes data sets wider by increasing columns and reducing rows. `pivot_wider()` has the opposite interface to pivot_longer(): we need to provide the existing columns that define the values (values_from) and the column name (names_from).\n",
    "supporting": [
      "day5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}