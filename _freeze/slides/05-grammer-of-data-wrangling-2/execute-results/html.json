{
  "hash": "17fee49b19ee04800bf9ea85a5f52bf6",
  "result": {
    "markdown": "---\ntitle: \"Data Wrangling - Part 2\"\nsubtitle: \"Lecture 6\"\ndate: \"September 14, 2022\"\nformat: revealjs\n---\n\n\n## Checklist\n\n\n::: {.cell}\n\n:::\n\n\n-- Clone ae-04\n\n-- Lab-1 Due Tonight on Gradescope \n\n-- HW1 due Tuesday 11:59pm on Gradescope\n\n## Announcements \n\n-- AE's are being graded \n\n-- Keep posting on Slack \n\n-- Feedback for Lab-0 is live\n\n## Goals for today\n\n-- Continue practicing with `dplyr` functions\n\n-- Change variable types\n\n-- Understand variable types\n\n## Warm up\n\nIdentify which `dplyr` functions chooses *rows* or changes *columns* of an exsisting data set \n\n-- `filter()`\n\n-- `select()`\n\n-- `slice()`\n\n-- `arrange()`\n\n## Warm up \n\n-- `filter()` - row\n\n-- `select()`\n\n-- `slice()`\n\n-- `arrange()`\n\n\n## Warm up \n\n-- `filter()` - row\n\n-- `select()` - column \n\n-- `slice()`\n\n-- `arrange()`\n\n## Warm up \n\n-- `filter()` - row\n\n-- `select()` - column \n\n-- `slice()` - row\n\n-- `arrange()`\n\n## Warm up \n\n-- `filter()` - row\n\n-- `select()` - column \n\n-- `slice()` - row\n\n-- `arrange()` - row\n\n# Types of variables \n\n## Types of variables \n\nType is how an object is stored in memory.\n\n-- `glimpse` is a great way to check data types \n\n-- Can also use `typeof()`\n\n## Examples \n\n-- `glimpse(mtcars)`\n\n-- `typeof(mtcars$mpg)`\n\n## Types of variables \n\nSome of the types of variables include: \n\n-- \"logical\" \n\n-- \"integer\" \n\n-- \"double\" \n\n-- \"character\" \n\n## logical \n\n-- `logi` in `glimpse`\n\n-- The logical data type in R is also known as boolean data type. It can only have two values: TRUE and FALSE. <br>\n\n-- `as.logical` can turn a variable into a logical. `False` = 0; `True` everything else\n\n## integer \n\n-- `int` in `glimpse` \n\n-- Integers are whole numbers (those numbers without a decimal point)\n\n-- `as.integer` can turn a double into an integer. Forces 22.8 -> 22. \n\n## double \n\n-- `dbl` in `glimpse`\n\n-- Real numbers (can include decimals)\n\n-- `as.double`can force a column to be a double. Identical to `as.numeric`. \n\n## character \n\n-- `chr` in `glimpse`\n\n-- Character string (text)\n\n-- `as.character` attempts to coerce its argument to character type\n\n## Why this matters \n\n-- Plotting \n\n-- Summary statistics \n\n# More on this later\n\n# ae-04\n\n## Wrap up \n\n-- Data types matter. Get in the habit of checking them at the beginning of analysis \n\n-- Have the tools to create new variables, calculate summary statistics, etc. that accompany strong visualizations \n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}