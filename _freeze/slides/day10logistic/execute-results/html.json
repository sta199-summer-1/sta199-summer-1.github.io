{
  "hash": "8c6bc479373ddeb7124ad89474640eda",
  "result": {
    "markdown": "---\ntitle: \"MLR - Logistic Regression\"\nsubtitle: \"Day 10\"\ndate: \"June 8th\"\nformat: revealjs\n---\n\n\n## Checklist\n\n-- Clone `ae-10`\n\n-- Homework 3 Due Tuesday (6-13)\n\n-- Project Proposal due Monday (6-12)\n\n--- Turn in on GitHub\n\n--- Lab today is a project work day\n\n## Warm Up: Question 1\n\n-- What is the main difference between Simple Linear Regression and Multiple Linear Regression?\n\n## Warm Up: Question 2\n\n-- What is the main difference between an additive model and an interaction model?\n\n## Goals\n\n-- Understand R-squared vs Adjusted R-squared\n\n-- What, why and how of logistic regression\n\n## More about R-Squared vs Adjusted R-Squared\n\nR-squared has...\n\n-   A meaningful definition\n\n-   a relationship with `cor` when in the SLR case\n\n## R-Squared\n\n![](images/R-squared.png)\n\n## R-squared\n\n![](images/sst.2.png)\n\n## More about R-Squared vs Adjusted R-Squared\n\nWhen can we use R-squared for model selection?\n\n-   When models have the same number of variables\n\n-   Why can't we use it to compare models with different number of variables? See ae-09 for demonstration.\n\n## R-squared: Takeaway\n\n-- statistical measure in a regression model that determines the proportion of variance in the response variable that can be explained by the explanatory variable(s).\n\n-- The more variables you include, the larger the R-squared value will be (always)\n\n## More about R-Squared vs Adjusted R-Squared\n\nAdjusted R-squared ...\n\n-   Doesn't have a clean definition\n\n-   Is very useful for model selection\n\n## Adjusted R-Squared\n\nTakeaway: Adds a penalty for \"unimportant\" predictors (x's)\n\n![](images/adjustedR2.png)\n\n# Any questions?\n\n## Finish MLR\n\n-- clone ae-10\n\n-- finish MLR (2 quantitative explanatory variables)\n\n# Logistic Regression\n\n## Goals\n\n-- The What, Why, and How of Logistic Regression\n\n## What is Logistic Regreesion\n\n-   Similar to linear regression.... but\n\n-   Modeling tool when our response is categorical\n\n## What we will do today\n\n-- This type of model is called a generalized linear model\n\n![](images/logistic.png){fig-align=\"center\"}\n\n# Start from the beginning\n\n## Terms\n\n-- Bernoulli Distribution\n\n-   2 outcomes: Success (p) or Failure (1-p)\n\n-   $y_i$ \\~ Bern(p)\n\n-   What we can do is we can use our explanatory variable(s) to model p\n\n## 2 Steps\n\n-- 1: Define a linear model\n\n-- 2: Define a link function\n\n## A linear model\n\n$\\eta_i = \\beta_o + \\beta_1*X_i + ...$\n\nNote: $\\eta_i$ is some response of our linear model\n\n-   But we can't stop here... $\\eta_i$ isn't the probability of success of our response\n\n-   Think about what a linear model looks like\n\n## Next steps\n\n-- Preform a transformation to our response variable so it has the appropriate range of values\n\n-- \"Link\" our linear model to the paramater of the outcome distribution\n\n-- $y_i$ \\~ Bern(p)\n\n## Generalized linear model\n\n-   Next, we need a link function that relates the linear model to the parameter of the outcome distribution i.e. **transform the linear model to have an appropriate range**\n\n## Logit Link Function\n\nThe logit link function is defined as follows:\n\n![](images/logitlink.png){fig-align=\"center\"}\n\n$\\eta_i$ = $log (\\frac{p}{1-p})$\n\n-- Note: log is in reference to natural log\n\n## Logit Link function\n\n-- A logit link function transforms the probabilities of the levels of a categorical response variable to a continuous scale that is unbounded\n\n-- Note: log is in reference to natural log\n\n## What's this look like\n\nTakes a \\[0,1\\] probability and maps it to log odds (-$\\infty$ to $\\infty$.)\n\n![](images/logit.png){fig-align=\"center\"}\n\n## Almost....\n\nThis isn't exactly what we need though.....\n\nWill help us get to our goal\n\n## So we have a generalized linear model (GLM)\n\n-   $logit(p_i)$ = $\\widehat{\\beta_o} +\\widehat{\\beta}_1X1_i + ....$\n\n-   logit(p) is also known as the log-odds\n\n-   logit(p) = $log(\\frac{p}{1-p})$\n\n-   $log(\\frac{p}{1-p})$ = $\\widehat{\\beta_o} +\\widehat{\\beta}_1X1 + ....$\n\n## One final fix\n\n-- Recall, the goal is to take values between -$\\infty$ and $\\infty$ and map them to probabilities. We need the opposite of the link function... or the *inverse*\n\n-- How do we take the inverse of a natural log?\n\n-   Taking the inverse of the logit function will map arbitrary real values back to the range \\[0, 1\\]\n\n## So\n\nWe need to take the inverse of the logit function\n\n-   $$log(\\frac{p}{1-p}) = \\widehat{\\beta_o} +\\widehat{\\beta}_1X1 + ....$$\n\n# Math Time\n\n## Inverse Logit Link\n\nExample Figure:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](day10logistic_files/figure-revealjs/unnamed-chunk-1-1.png){width=960}\n:::\n:::\n\n\n## What we will do today\n\nCalculate probabilities of success of a response based on values of explanatory variable x.\n\n![](images/logistic.png){fig-align=\"center\"}\n",
    "supporting": [
      "day10logistic_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}