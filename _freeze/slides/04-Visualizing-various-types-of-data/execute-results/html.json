{
  "hash": "29fcd45359d9bb8e490e4e0b2fb8f7b5",
  "result": {
    "markdown": "---\ntitle: \"Visualizing various types of data\"\nsubtitle: \"Lecture 3\"\ndate: \"January 20, 2022\"\nformat: revealjs\n---\n\n\n## Checklist\n\n\n::: {.cell}\n\n:::\n\n\n-- Go to the course [GitHub org](https://github.com/sta199-s23-2) and find your `ae-02-s23` (repo name will be suffixed with your GitHub name).\n\n-- Clone the repo in your container, open the Quarto document in the repo\n\n-- Are you on Slack?\n\n## Announcements\n\nDue Dates + Turn In\n\n-- AE's due Saturday and Monday (11:59) PM - GitHub\n\n-- Labs due Fri (11:59) - Gradescope\n\n-- HWs due Tue (11:59) - Gradescope\n\n## How to turn AE's via Github\n\n-- render, commit, and push\n\n1.  If you made any changes since the last render, render again to get the final version of the AE.\n\n2.  Check the box next to each document in the Git tab (this is called \"staging\" the changes). Commit the changes you made using an simple and informative message.\n\n3.  Use the **green arrow** to push your changes to your repo on GitHub.\n\n4.  Check your repo on GitHub and see the updated files. Once your updated files are in your repo on GitHub, you're good to go!\n\n## Announcements\n\nPrepare Material\n\nR4DS: Chp 2 - Data visualization - Sections 2.1 and 2.4\n\n## Goals for today\n\nCreate plots!\n\n-- Understand `geoms`\n\n-- Scatterplots, boxplots, histograms, etc\n\n-- Practice with the fundamentals of ggplot\n\n## Tips and Tricks\n\n-- Let the types of variables dictate the plot\n\n-- Informative title\n\n-- Axes should be labeled\n\n-- Careful consideration of aesthetic choices (like color)\n\n## The process\n\nYou have a data set you want to work with...\n\n`mtcars`\n\n## The process\n\n`mtcars`\n\nYou want to create a visualization. The first thing we need to do is set up the canvas...\n\n## The process\n\n|     `mtcars |>`\n|         `ggplot()`\n\n![](images/04-Visualizing-various-types-of-data/canvas.jpg){width=\"400\" height=\"400\" fig-align=\"\\\"center\"}\n\n## The process\n\n|     `mtcars |>`\n|         `ggplot(`\n|         `aes(`\n|              `x = variable.name, y = variable.name)`\n|                `)`\n\naes: describe how variables in the data are mapped to your canvas\n\n## The process\n\n`+` \"and\"\n\nWhen working with ggplot functions, we will add to our canvus using `+`\n\n## The process\n\n|     `mtcars |>`\n|         `ggplot(`\n|         `aes(`\n|              `x = variable.name, y = variable.name)`\n|                `)` +\n|         `geom_point()`\n\n## The process\n\n![](images/04-Visualizing-various-types-of-data/paint.jpg){width=\"400\" height=\"400\" fig-align=\"\\\"center\"}\n\n## The variables dictate the plot\n\n-- Two quantitative variables\n\n-- One quantitative variable\n\n-- One categorical variable\n\n-- Two categorical variables\n\n# geom reference\n\nhttps://ggplot2.tidyverse.org/reference/\n\n**A geom is the geometrical object that a plot uses to represent data. People often describe plots by the type of geom that the plot uses. For example, bar charts use bar geoms, line charts use line geoms, boxplots use boxplot geoms, and so on. Scatterplots break the trend; they use the point geom.**\n\n## ae-02-s23\n\nThese data were collected from 2007 - 2009 by Dr. Kristen Gorman with the Palmer Station Long Term Ecological Research Program, part of the US Long Term Ecological Research Network. The data were imported directly from the Environmental Data Initiative (EDI) Data Portal, and are available for use by CC0 license (\"No Rights Reserved\") in accordance with the Palmer Station Data Policy.\n\n## Recap of AE {.smaller}\n\n-   Pick geoms based on data types.\n\n-   Manipulate graphs to be more appropriate with arguments\n\n-   Take control of your labels\n\n-   Use color to your advantage. https://ggplot2.tidyverse.org/reference/ggtheme.html & \\n https://ggplot2.tidyverse.org/reference/scale_viridis.html\n",
    "supporting": [
      "04-Visualizing-various-types-of-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}