{
  "hash": "f9be6e68c6e2db75604c6c215788ab97",
  "result": {
    "markdown": "---\ntitle: \"AE-22-Hypo-Testing-III\"\nformat: html\neditor: visual\n---\n\n\n## Discussion around alpha\n\nWhat is alpha?\n\n**This is our significance level that we use to help make decisions and conclusions for a hypothesis test. It also is the probability of making a type 1 error**\n\nWhy would a researcher choose to have a larger or smaller $\\alpha$ value?\n\n**The larger the alpha, the less evidence you will need to reject the null hypothesis. However, the larger the alpha, the more likely it is to reject the null hypothesis incorrectly**. \n\n## Iris Data\n\nThe Iris Dataset contains four features (length and width of sepals and petals) of 50 samples of three species of Iris (Iris setosa, Iris virginica and Iris versicolor). A sepal is the outer parts of the flower (often green and leaf-like) that enclose a developing bud. The petal are parts of a flower that are the pollen producing part of the flower that are often conspicuously colored. The difference between sepals and petals can be seen below.\n\nThe data were collected in 1936 at the Gaspé Peninsula, in Canada. For the first question of the exam, you will use this data sets to investigate a variety of relationships to learn more about each of these three flower species. The data set is prepackaged in R, and is called `iris`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0     ✔ purrr   0.3.5\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.1     ✔ stringr 1.4.1\n✔ readr   2.1.3     ✔ forcats 0.5.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'purrr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.0.0 ──\n✔ broom        1.0.1     ✔ rsample      1.1.0\n✔ dials        1.1.0     ✔ tune         1.0.1\n✔ infer        1.0.3     ✔ workflows    1.1.0\n✔ modeldata    1.0.1     ✔ workflowsets 1.0.0\n✔ parsnip      1.0.3     ✔ yardstick    1.1.0\n✔ recipes      1.0.3     \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'broom' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dials' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'parsnip' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'recipes' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Search for functions across packages at https://www.tidymodels.org/find/\n```\n:::\n\n```{.r .cell-code}\nlibrary(openintro)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: airports\nLoading required package: cherryblossom\nLoading required package: usdata\n\nAttaching package: 'openintro'\n\nThe following object is masked from 'package:modeldata':\n\n    ames\n```\n:::\n\n```{.r .cell-code}\ndata(iris)\n```\n:::\n\n\nFrom last AE, calculate and report the sample statistic below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n  filter(Species != \"virginica\") |>\n  group_by(Species) |>\n  summarize(m = mean(Sepal.Length))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  Species        m\n  <fct>      <dbl>\n1 setosa      5.01\n2 versicolor  5.94\n```\n:::\n:::\n\n\nSave your response below as `estimate`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#define your difference in means as your estimate below\n\nestimate <- -0.93\n```\n:::\n\n\nTo \"standardize our statistic\"... we need to divide by the standard error. The standard error of the different in sample means can be calculated as follows:\n\n![](images/se.png)\n\nBelow, define each piece of the standard error accordingly\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsd1 <- iris |> \n  filter(Species == \"setosa\") |>\n  summarise(sd_s = sd(Sepal.Length)) |>\n  as.numeric()\n  \n  \n  \nn1 <- 50\n\nsd2 <- iris |> \n  filter(Species == \"versicolor\") |>\n  summarise(sd_s = sd(Sepal.Length)) |>\n  as.numeric()\n\nn2 <- 50  \n```\n:::\n\n\nNow, use the information to calculate your t-statistic below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntscore <- (estimate - 0) / sqrt(((sd1^2)/n1) + ((sd2^2)/n2))\n```\n:::\n\n\nWe use `pt` to calculate our p-value. Recall that we need to define our degrees of freedom! Commonly, we use `min(n1-1; n2-1)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npt(tscore , df = 49)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.815135e-14\n```\n:::\n:::\n\n\nWrite an appropriate scope of inference in the context of the problem below:\n\nRandom Sampling did not happen\n\nRandom Assignment did not happen\n\nWe do not have random sampling, so any results we find are generalized to our sample or a similar sample.\n\nThere is an **association** between Species and Sepal length in our sample or a similar sample.\n\n## Two Categorical Variables: Case study: CPR and blood thinner\n\nCardiopulmonary resuscitation (CPR) is a procedure used on individuals suffering a heart attack when other emergency resources are unavailable. This procedure is helpful in providing some blood circulation to keep a person alive, but CPR chest compressions can also cause internal injuries. Internal bleeding and other injuries that can result from CPR complicate additional treatment efforts. For instance, blood thinners may be used to help release a clot that is causing the heart attack once a patient arrives in the hospital. However, blood thinners negatively affect internal injuries.\n\nHere we consider an experiment with patients who underwent CPR for a heart attack and were subsequently admitted to a hospital. Each patient was randomly assigned to either receive a blood thinner (treatment group) or not receive a blood thinner (control group). The outcome variable of interest was whether the patient survived for at least 24 hours.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(cpr)\n```\n:::\n\n\nCalculate your sample statistic below. Next, write out your sample statistic using proper notation (died - survived).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncpr |>\n  group_by(group, outcome) |>\n  summarize(props = n())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'group'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 3\n# Groups:   group [2]\n  group     outcome  props\n  <fct>     <fct>    <int>\n1 control   died        39\n2 control   survived    11\n3 treatment died        26\n4 treatment survived    14\n```\n:::\n:::\n\n\nNow create an appropriate visualization of these data below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncpr |>\n  ggplot(\n    aes(x = group , y = ..count..)\n  ) + \n  geom_bar(aes(fill = outcome), position = \"stack\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The dot-dot notation (`..count..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(count)` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](ae-22-A_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nNext, explain how one dot (observation) is created on the permutation null distribution used to test our hypotheses...\n\n**Assuming that group is independent of outcome, we permute outcome to new values of group. Next, we calculate the new proportions of died for each permuted group. We subtract these difference in proportions. That is a dot!**\n\nNow, calculate the p-value below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\nnull_dist <- cpr |>\n  specify(response = outcome , explanatory = group , success = \"died\") |>\n  hypothesize(null = \"independence\") |>\n  generate(reps = 1000, type = \"permute\") |>\n  calculate(stat = \"diff in props\" , order = c(\"control\", \"treatment\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvisualize(null_dist) +\n shade_p_value(obs_stat = .13, direction = \"two-sided\") \n```\n\n::: {.cell-output-display}\n![](ae-22-A_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n```{.r .cell-code}\nnull_dist |>\n  get_p_value(obs_stat = .13, direction = \"two-sided\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  p_value\n    <dbl>\n1   0.216\n```\n:::\n:::\n",
    "supporting": [
      "ae-22-A_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}