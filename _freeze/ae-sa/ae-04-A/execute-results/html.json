{
  "hash": "d660848c9d1ee36c7b25439f2097f5c0",
  "result": {
    "markdown": "---\ntitle: \"AE 04: Wrangling flights - Suggest Answers\"\ncategories: \n  - Application exercise\neditor: visual\n---\n\n\n::: callout-important\nThis AE is due Monday, Jan 30 at 11:59pm.\n:::\n\nTo demonstrate data wrangling we will use `flights`, a tibble in the **nycflights13** R package. It includes characteristics of all flights departing from New York City (JFK, LGA, EWR) in 2013.\n\n**Note: As we go through the AE, practicing thinking in steps, and reading your code as sentences**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(nycflights13) # the data are called flights\n```\n:::\n\n\n# finish ae-03 material\n\n## `filter()`\n\n-   Demo: Filter the data frame by selecting the rows where the destination airport is RDU. Save this new data set as `RDU_flights`. Make sure that this data set only contains the columns `dest`, `year`, and `carrier`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRDU_flights <- flights |>\n  filter(dest == \"RDU\") |>\n  select(dest, year, carrier)\n```\n:::\n\n\nNow, run the following code with one equals sign instead of two. Does it still work?\n\n*(=) is a Assignment operator while (==) is a Equal to operator. (=) is used for assigning the values from right to left while (==) is used for showing equality between values.*\n\n-   Demo: We can also filter using more than one condition. Here we select all rows where the destination airport is RDU and the arrival delay is less than 0. As we've learned, conditions within functions are separated by a `,`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(dest == \"RDU\", arr_delay < 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4,232 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      800        810     -10     949     955      -6 MQ     \n 2  2013     1     1      832        840      -8    1006    1030     -24 MQ     \n 3  2013     1     1      851        851       0    1032    1036      -4 EV     \n 4  2013     1     1      917        920      -3    1052    1108     -16 B6     \n 5  2013     1     1     1024       1030      -6    1204    1215     -11 MQ     \n 6  2013     1     1     1127       1129      -2    1303    1309      -6 EV     \n 7  2013     1     1     1157       1205      -8    1342    1345      -3 MQ     \n 8  2013     1     1     1317       1325      -8    1454    1505     -11 MQ     \n 9  2013     1     1     1505       1510      -5    1654    1655      -1 MQ     \n10  2013     1     1     1800       1800       0    1945    1951      -6 B6     \n# … with 4,222 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\nWe can do more complex tasks using logical operators:\n\n| operator      | definition                   |\n|:--------------|:-----------------------------|\n| `<`           | is less than?                |\n| `<=`          | is less than or equal to?    |\n| `>`           | is greater than?             |\n| `>=`          | is greater than or equal to? |\n| `==`          | is exactly equal to?         |\n| `!=`          | is not equal to?             |\n| `x & y`       | is x AND y?                  |\n| `x \\| y`      | is x OR y?                   |\n| `is.na(x)`    | is x NA?                     |\n| `!is.na(x)`   | is x not NA?                 |\n| `x %in% y`    | is x in y?                   |\n| `!(x %in% y)` | is x not in y?               |\n| `!x`          | is not x?                    |\n\nThe final operator only makes sense if `x` is logical (TRUE / FALSE).\n\n-   **Your turn (4 minutes):** Describe what the code is doing in words.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> # Data set \n  filter(dest %in% \"RDU\", # Is RDU in dest?\n         arr_delay < 0 | dep_delay < 0\n         ) |>\n  glimpse()\n```\n:::\n\n\n-   What if we want to like at destinations of RDU and GSO? How does the below code change?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  flights |>\n  filter(dest %in% c(\"RDU\", \"GSO\"),\n         arr_delay < 0 | dep_delay < 0\n         )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6,203 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      800        810     -10     949     955      -6 MQ     \n 2  2013     1     1      832        840      -8    1006    1030     -24 MQ     \n 3  2013     1     1      851        851       0    1032    1036      -4 EV     \n 4  2013     1     1      917        920      -3    1052    1108     -16 B6     \n 5  2013     1     1     1024       1030      -6    1204    1215     -11 MQ     \n 6  2013     1     1     1127       1129      -2    1303    1309      -6 EV     \n 7  2013     1     1     1157       1205      -8    1342    1345      -3 MQ     \n 8  2013     1     1     1317       1325      -8    1454    1505     -11 MQ     \n 9  2013     1     1     1449       1450      -1    1651    1640      11 MQ     \n10  2013     1     1     1505       1510      -5    1654    1655      -1 MQ     \n# … with 6,193 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\nWhy `c`?\n\ncombine: Use when we create a list\n\n**Your turn (2 minutes):** Subset the data to only include planes that traveled more than 500 in distance and had a negative departure delay.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(distance > 500 & dep_delay < 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 137,888 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      544        545      -1    1004    1022     -18 B6     \n 2  2013     1     1      554        600      -6     812     837     -25 DL     \n 3  2013     1     1      554        558      -4     740     728      12 UA     \n 4  2013     1     1      555        600      -5     913     854      19 B6     \n 5  2013     1     1      557        600      -3     838     846      -8 B6     \n 6  2013     1     1      558        600      -2     753     745       8 AA     \n 7  2013     1     1      558        600      -2     849     851      -2 B6     \n 8  2013     1     1      558        600      -2     853     856      -3 B6     \n 9  2013     1     1      558        600      -2     924     917       7 UA     \n10  2013     1     1      558        600      -2     923     937     -14 UA     \n# … with 137,878 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\n## `count()`\n\n-   Demo: Create a frequency table of the destination locations for flights from New York.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  count(dest)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 105 × 2\n   dest      n\n   <chr> <int>\n 1 ABQ     254\n 2 ACK     265\n 3 ALB     439\n 4 ANC       8\n 5 ATL   17215\n 6 AUS    2439\n 7 AVL     275\n 8 BDL     443\n 9 BGR     375\n10 BHM     297\n# … with 95 more rows\n```\n:::\n:::\n\n\n-   Demo: In which month was there the fewest number of flights? How many flights were there in that month? Hint: Type `?min` into the console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  count(month) |>\n  filter(n == min(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  month     n\n  <int> <int>\n1     2 24951\n```\n:::\n:::\n\n\n-   On which date (month + day) was there the largest number of flights? How many flights were there on that day?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  count(month,day) |>\n  filter(n == max(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  month   day     n\n  <int> <int> <int>\n1    11    27  1014\n```\n:::\n:::\n\n\n## `mutate()`\n\nUse `mutate()` to create a new variable.\n\n-   Demo: In the code chunk below, `air_time` (minutes in the air) is converted to hours, and then new variable `mph` is created, corresponding to the miles per hour of the flight. Run the code. Next, comment each line of code below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  mutate(hours = air_time / 60, \n         mph = distance / hours) |>\n  select(air_time, distance, hours, mph)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 4\n   air_time distance hours   mph\n      <dbl>    <dbl> <dbl> <dbl>\n 1      227     1400 3.78   370.\n 2      227     1416 3.78   374.\n 3      160     1089 2.67   408.\n 4      183     1576 3.05   517.\n 5      116      762 1.93   394.\n 6      150      719 2.5    288.\n 7      158     1065 2.63   404.\n 8       53      229 0.883  259.\n 9      140      944 2.33   405.\n10      138      733 2.3    319.\n# … with 336,766 more rows\n```\n:::\n:::\n\n\n-   **Your turn (4 minutes):** Create a new variable to calculate the percentage of flights in each month. What percentage of flights take place in July?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  count(month) |>\n  mutate(perc = n / sum(n) * 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 3\n   month     n  perc\n   <int> <int> <dbl>\n 1     1 27004  8.02\n 2     2 24951  7.41\n 3     3 28834  8.56\n 4     4 28330  8.41\n 5     5 28796  8.55\n 6     6 28243  8.39\n 7     7 29425  8.74\n 8     8 29327  8.71\n 9     9 27574  8.19\n10    10 28889  8.58\n11    11 27268  8.10\n12    12 28135  8.35\n```\n:::\n:::\n\n\n## changing variable type\n\n-   **Your turn (5 minutes):** We want to create a visualization to assess the relationship between `dep_delay` and `dep_time` conditioned on the months January and June. Using the code chunk below, check to see which types of variables each of the three listed above are. Next, create an appropriate visualization to answer the question above. Hint: You may have to change the type of one variable using `factor`. Comment each line of code below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(month %in% c(1 , 6)) |>\n  mutate(month = factor(month)) |>\n  #droplevels() |>\n  ggplot(\n    aes(x = dep_delay, y = dep_time, color = month)\n  ) + \n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 1530 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](ae-04-A_files/figure-html/data-viz-factor-1.png){width=672}\n:::\n:::\n\n\n## `summarize()`\n\n`summarize()` collapses the rows into summary statistics and removes columns irrelevant to the calculation.\n\nBe sure to name your columns!\n\n-   Calculate the mean departure delay below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  summarize(mean_dep_delay = mean(dep_delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  mean_dep_delay\n           <dbl>\n1             NA\n```\n:::\n:::\n\n\n**Question: Why did this code return `NA`?**\n\nLet's fix it! We can use `na.rm` to remove `NA`s.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  summarize(mean_dep_delay = mean(dep_delay, na.rm = F))\n```\n:::\n\n\n## `group_by()`\n\n`group_by()` is used for grouped operations. It's very powerful when paired with `summarise()` to calculate summary statistics by group.\n\nHere we find the mean and standard deviation of departure delay for each month. Comment each line of code below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  group_by(month) |> # groups together all observations that have the same month\n  summarize(mean_dep_delay = mean(dep_delay, na.rm=T), #calculate mean\n            sd_dep_delay = sd(dep_delay, na.rm=T) #calculate sd\n            )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 3\n   month mean_dep_delay sd_dep_delay\n   <int>          <dbl>        <dbl>\n 1     1          10.0          36.4\n 2     2          10.8          36.3\n 3     3          13.2          40.1\n 4     4          13.9          43.0\n 5     5          13.0          39.4\n 6     6          20.8          51.5\n 7     7          21.7          51.6\n 8     8          12.6          37.7\n 9     9           6.72         35.6\n10    10           6.24         29.7\n11    11           5.44         27.6\n12    12          16.6          41.9\n```\n:::\n:::\n\n\n-   **Your turn (4 minutes):** What is the median departure delay for each airports around NYC (`origin`)? Which airport has the shortest median departure delay?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  group_by(origin) |>\n  summarize(med_dep_delay = median(dep_delay, na.rm = T))\n```\n:::\n\n\n## Optional\n\nCreate a new data set that only contains flights that do not have a missing departure time. Include the columns `year`, `month`, `day`, `dep_time`, `dep_delay`, and `dep_delay_hours` (the departure delay in hours). *Hint: Note you may need to use `mutate()` to make one or more of these variables.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew.data <- flights |>\n  filter(!is.na(dep_time)) |>\n  select(dep_time, dep_delay) |>\n  mutate(dep_delay_hours = dep_delay / 60)\n```\n:::\n\n\nFor each airplane (uniquely identified by `tailnum`), use a `group_by()` paired with `summarize()` to find the sample size, mean, and standard deviation of flight distances. Then include only the top 5 and bottom 5 airplanes in terms of mean distance traveled per flight in the final data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  group_by(tailnum) |>\n  summarize(n = n(),\n            mean = mean(distance),\n            sd = sd(distance)) |>\n  arrange(desc(mean)) |>\n  slice(c(1:5, (n()-4):n()))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 4\n   tailnum     n  mean    sd\n   <chr>   <int> <dbl> <dbl>\n 1 N380HA     40 4983    0  \n 2 N381HA     25 4983    0  \n 3 N382HA     26 4983    0  \n 4 N383HA     26 4983    0  \n 5 N384HA     33 4983    0  \n 6 N945UW    285  176.  31.2\n 7 N956UW    222  174.  31.4\n 8 N959UW    213  174.  34.3\n 9 N948UW    232  174.  32.7\n10 N955UW    225  173.  32.9\n```\n:::\n:::\n",
    "supporting": [
      "ae-04-A_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}