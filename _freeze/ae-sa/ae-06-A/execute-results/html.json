{
  "hash": "e07d2ba7dbb98f0ea502930b83e38d87",
  "result": {
    "markdown": "---\ntitle: \"AE 06: Finish AE-05 + AE-06 Suggested Answers\"\ncategories: \n  - Application exercise\neditor: visual\n---\n\n\n::: callout-important\nRun the following code until you need to recreate the plot. This is the warm up question for today's class.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0     ✔ purrr   0.3.5\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.1     ✔ stringr 1.4.1\n✔ readr   2.1.3     ✔ forcats 0.5.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'purrr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(scales)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n```\n:::\n\n```{.r .cell-code}\nfisheries <- read_csv(\"data/fisheries.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 82 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): country\ndbl (3): capture, aquaculture, total\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ncontinents <- read_csv(\"data/continents.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 245 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n## Global aquaculture production\n\nThe Fisheries and Aquaculture Department of the Food and Agriculture Organization of the United Nations collects data on fisheries production of countries.\n\n**Goal**: Our goal is to create a visualization of the mean share of aquaculture by continent.\n\n-- Join data sets together\n\n\n::: {.cell}\n\n```{.r .cell-code}\njoined_fish <- fisheries |> \n  left_join(continents)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = \"country\"\n```\n:::\n:::\n\n\n-- Fill in NA values with appropriate continent information\n\n\n::: {.cell}\n\n```{.r .cell-code}\njoined_fish <- joined_fish |> \n  mutate(\n    continent = case_when(\n    country == \"Democratic Republic of the Congo\" ~ \"Africa\",\n    country == \"Hong Kong\" ~ \"Asia\",\n    country == \"Myanmar\" ~ \"Asia\", \n    TRUE ~ continent\n    )\n  )\n```\n:::\n\n\n-- Add a new column to the `joined_fish` data frame called `aq_prop`. We will calculate it as `aquaculture / total`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\njoined_fish <- joined_fish |>\n  mutate(aq_prop = aquaculture / total)\n```\n:::\n\n\n-   **Demo:** Using your code above, create a new data frame called `fisheries_summary` that calculates minimum, mean, and maximum aquaculture proportion for each continent in the fisheries data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfisheries_summary <- joined_fish |>\n  group_by(continent) |>\n  summarize(\n    min_aq_prop = min(aq_prop),\n    max_aq_prop = max(aq_prop),\n    mean_aq_prop = mean(aq_prop)\n  )\n```\n:::\n\n\n## Warm up starts here!\n\n-   **Demo:** Recreate the following plot using the data frame `fisheries_summary` you have developed so far.\n\nHint: We use `ftc_relevel` to manually specify levels of a factor\n\nWe use `fct_reorder` to reorder a factor based on another variable\n\nWe can use functions in R to create more appropriate axis labels (such as adding %s). We can do this through the following: `scale_x_continuous(labels = scales::)` and `scale_y_continuous(labels = scales::)`. See documentation [here](https://ggplot2.tidyverse.org/reference/scale_continuous.html) and create axis labels that match the picture.\n\n![](images/aquaculture-production-by-continent.png){fig-align=\"center\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfisheries_summary |>\n  ggplot(\n    aes(y = fct_reorder(continent, mean_aq_prop),\n        x = mean_aq_prop)) + \n  geom_col() + \n  labs(\n    title = \"Average share of aquaculture by continent\",\n    subtitle = \"out of total fisheries harvest, 2016\",\n    y =\" \",\n    x = \" \"\n  ) + \n  scale_x_continuous(labels = scales:: percent)\n```\n\n::: {.cell-output-display}\n![](ae-06-A_files/figure-html/fisheries-plot-1.png){width=672}\n:::\n:::\n\n\n## Pivot Practice\n\nRun the following code below. Are these data in long or wide format? Why?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- tibble(\n  state = rep(c(\"MT\", \"NC\" , \"SC\"),2),\n  group = c(rep(\"C\", 3), rep(\"D\", 3)),\n  obs = c(1:6)\n  )\n\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  state group   obs\n  <chr> <chr> <int>\n1 MT    C         1\n2 NC    C         2\n3 SC    C         3\n4 MT    D         4\n5 NC    D         5\n6 SC    D         6\n```\n:::\n:::\n\n\nPivot these data so that the data are wide. i.e. Each state should be it's own unique observation (row). Save this new data set as `y`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- x |>\n  pivot_wider(names_from = group, values_from = obs)\n```\n:::\n\n\nNow, let's change it back. Introducing `pivot_longer`. There are three things we need to consider with `pivot_longer`:\n\n-   What the columns will be\n-   `names_to`\n-   `values_to`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny |>\n  pivot_longer(cols = !state, names_to = \"group\", values_to = \"obs\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  state group   obs\n  <chr> <chr> <int>\n1 MT    C         1\n2 MT    D         4\n3 NC    C         2\n4 NC    D         5\n5 SC    C         3\n6 SC    D         6\n```\n:::\n:::\n\n\n## Pivot Practice 2\n\nLet's try this on a real data set.\n\nThe Portland Trailblazers are a National Basketball Association (NBA) sports team. These data reflect the points scored by 9 Portland Trailblazers players across the first 10 games of the 2021-2022 NBA season.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrailblazer <- read_csv(\"data/trailblazer21.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 9 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): Player\ndbl (10): Game1_Home, Game2_Home, Game3_Away, Game4_Home, Game5_Home, Game6_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n-- Take a slice at the data. Are these data in wide or long format?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslice(trailblazer)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 11\n  Player Game1…¹ Game2…² Game3…³ Game4…⁴ Game5…⁵ Game6…⁶ Game7…⁷ Game8…⁸ Game9…⁹\n  <chr>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 Damia…      20      19      12      20      25      14      20      26       4\n2 CJ Mc…      24      28      20      25      14      25      20      21      27\n3 Norma…      14      16      NA      NA      12      14      22      23      25\n4 Rober…       8       6       0       3       9       6       0       6      19\n5 Jusuf…      20       9       4      17      14      13       7       6      10\n6 Cody …       5       5       8      10       9       6       0       7       0\n7 Anfer…      11      18      12      17       5      19      17      15      16\n8 Larry…       2       8       5       8       3       8       7       0       2\n9 Nassi…       7      11       5       9       8       8       4       0       7\n# … with 1 more variable: Game10_Home <dbl>, and abbreviated variable names\n#   ¹​Game1_Home, ²​Game2_Home, ³​Game3_Away, ⁴​Game4_Home, ⁵​Game5_Home,\n#   ⁶​Game6_Away, ⁷​Game7_Away, ⁸​Game8_Away, ⁹​Game9_Home\n```\n:::\n:::\n\n\n-- Pivot the data so that you have columns for `Player`, `Game`, `Points`. Save this as a new data set called `new.blazer`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew.blazer <- trailblazer |>\n  pivot_longer(\n    cols = !Player,\n    names_to = \"Game\",\n    values_to = \"Points\"\n  )\n```\n:::\n\n\n----------------------------- Answer Below -------------------------------------\n\n-- Suppose now that you are asked to have two separate columns within these data. One column to represent `Game`, and one to represent `Location`. Make this happen below. Save your new data set as `new.blazer`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew.blazer <- trailblazer |>  \n  pivot_longer(\n    cols = -Player,\n    names_to = \"Game\",\n    values_to = \"Points\",\n  ) |> \n  separate(Game, sep = \"_\", into = c(\"Game\", \"Location\"))\n```\n:::\n\n\n-- Now, use `pivot_wider` to reshape the `new.blazer` data frame such that you have a 90 x 4 tibble with columns `Player`, `Game`, `Home`, `Away`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew.blazer |>\n  pivot_wider(\n    names_from = Location,\n    values_from = Points\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 90 × 4\n   Player         Game    Home  Away\n   <chr>          <chr>  <dbl> <dbl>\n 1 Damian Lillard Game1     20    NA\n 2 Damian Lillard Game2     19    NA\n 3 Damian Lillard Game3     NA    12\n 4 Damian Lillard Game4     20    NA\n 5 Damian Lillard Game5     25    NA\n 6 Damian Lillard Game6     NA    14\n 7 Damian Lillard Game7     NA    20\n 8 Damian Lillard Game8     NA    26\n 9 Damian Lillard Game9      4    NA\n10 Damian Lillard Game10    25    NA\n# … with 80 more rows\n```\n:::\n:::\n",
    "supporting": [
      "ae-06-A_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}