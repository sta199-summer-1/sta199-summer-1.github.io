{
  "hash": "99c156fb62b7847907821808dd314501",
  "result": {
    "markdown": "---\ntitle: \"Exam-Review - SUGGESTED ANSWERS\"\ncategories: \n  - Application exercise\neditor: visual\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0     ✔ purrr   0.3.5\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.1     ✔ stringr 1.4.1\n✔ readr   2.1.3     ✔ forcats 0.5.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'purrr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n:::\n\n\nBelow, we are going to practice joins using the following fake data sets about coffee. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoffee1 <- tibble(\n  Month = c(\"July\" , \"July\", \"August\", \"August\" , \"September\"),\n  Coffee_Shop = c(\"Starbucks\" , \"Starbucks\", \"ThePerk\" , \"ThePerk\", \"Starbucks\"),\n  Drinks_Sold = c(3,2,6,5,1)\n)\n\ncoffee2 <- tibble(\n  month = c(\"June\", \"July\", \"August\"),\n  Special = c(\"Free Drink\", \"Half-Off\", \"Free Drink\")\n  )\n```\n:::\n\n\nBelow, left_join coffee2 to coffee1. Comment on how these two data sets were joined together.\nHint: You may need to use the `by` argument in the left_join function. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoffee1 |>\n  left_join(coffee2 , by = c(\"Month\" = \"month\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n  Month     Coffee_Shop Drinks_Sold Special   \n  <chr>     <chr>             <dbl> <chr>     \n1 July      Starbucks             3 Half-Off  \n2 July      Starbucks             2 Half-Off  \n3 August    ThePerk               6 Free Drink\n4 August    ThePerk               5 Free Drink\n5 September Starbucks             1 <NA>      \n```\n:::\n:::\n\n\nSame thing different way: \n\nThe reason we used the `by` argument in the left_join function was because the column names were not the same across the two data sets. Run the following code below, and compare it to the output above. Same? Different?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoffee2 <- coffee2 |>\n  rename(\"Month\" = month)\n\ncoffee1 |>\n  left_join(coffee2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = \"Month\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n  Month     Coffee_Shop Drinks_Sold Special   \n  <chr>     <chr>             <dbl> <chr>     \n1 July      Starbucks             3 Half-Off  \n2 July      Starbucks             2 Half-Off  \n3 August    ThePerk               6 Free Drink\n4 August    ThePerk               5 Free Drink\n5 September Starbucks             1 <NA>      \n```\n:::\n:::\n\n\nNow, `full_join` and `right_join` the two data sets together. Comment on the results. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoffee1 |>\n  left_join(coffee2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = \"Month\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n  Month     Coffee_Shop Drinks_Sold Special   \n  <chr>     <chr>             <dbl> <chr>     \n1 July      Starbucks             3 Half-Off  \n2 July      Starbucks             2 Half-Off  \n3 August    ThePerk               6 Free Drink\n4 August    ThePerk               5 Free Drink\n5 September Starbucks             1 <NA>      \n```\n:::\n\n```{.r .cell-code}\ncoffee1 |>\n  full_join(coffee2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = \"Month\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  Month     Coffee_Shop Drinks_Sold Special   \n  <chr>     <chr>             <dbl> <chr>     \n1 July      Starbucks             3 Half-Off  \n2 July      Starbucks             2 Half-Off  \n3 August    ThePerk               6 Free Drink\n4 August    ThePerk               5 Free Drink\n5 September Starbucks             1 <NA>      \n6 June      <NA>                 NA Free Drink\n```\n:::\n\n```{.r .cell-code}\ncoffee1 |>\n  right_join(coffee2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = \"Month\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n  Month  Coffee_Shop Drinks_Sold Special   \n  <chr>  <chr>             <dbl> <chr>     \n1 July   Starbucks             3 Half-Off  \n2 July   Starbucks             2 Half-Off  \n3 August ThePerk               6 Free Drink\n4 August ThePerk               5 Free Drink\n5 June   <NA>                 NA Free Drink\n```\n:::\n:::\n\n\nleft_join - coffee2 gets joined to coffee1 by Month. Anywhere there is a match from the Month, it will add informatino from the other columns of Y. Only keeps rows of coffee1. \n\nright_join - the opposite of left_join. Keeps rows of y and adds x columns. \n\nfull_join - includes both x and y rows. \n\n\n## Summary Statistics\n\nIn this short activity, we will use the `Orange` data set built in R. Please run `?Orange` to learn more.\n\nBelow, please complete the following:\n\n-   Calculate the mean circumference of each tree.\n\n-   Create a new variable called `old` to indicate when the tree became over 1000 years old. Use the value `Yes` if the measurement is over 1000, and `No` if it is not. Hint: A way to answer this involves using `if_else`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nOrange |>\n  group_by(Tree) |>\n  summarize(mean_cir = mean(circumference))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  Tree  mean_cir\n  <ord>    <dbl>\n1 3         94  \n2 1         99.6\n3 5        111. \n4 2        135. \n5 4        139. \n```\n:::\n\n```{.r .cell-code}\nOrange |>\n  mutate(circumference = if_else(age > 1000, \"Yes\", \"No\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Tree  age circumference\n1     1  118            No\n2     1  484            No\n3     1  664            No\n4     1 1004           Yes\n5     1 1231           Yes\n6     1 1372           Yes\n7     1 1582           Yes\n8     2  118            No\n9     2  484            No\n10    2  664            No\n11    2 1004           Yes\n12    2 1231           Yes\n13    2 1372           Yes\n14    2 1582           Yes\n15    3  118            No\n16    3  484            No\n17    3  664            No\n18    3 1004           Yes\n19    3 1231           Yes\n20    3 1372           Yes\n21    3 1582           Yes\n22    4  118            No\n23    4  484            No\n24    4  664            No\n25    4 1004           Yes\n26    4 1231           Yes\n27    4 1372           Yes\n28    4 1582           Yes\n29    5  118            No\n30    5  484            No\n31    5  664            No\n32    5 1004           Yes\n33    5 1231           Yes\n34    5 1372           Yes\n35    5 1582           Yes\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}