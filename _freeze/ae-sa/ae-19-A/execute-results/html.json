{
  "hash": "6df7efc23754deddddae8ab53a57e127",
  "result": {
    "markdown": "---\ntitle: \"Suggested Answers: Central limit theorem II\"\nsubtitle: \"STA 199\"\neditor: source\nformat: html\nexecute:\n  error: true\n---\n\n\n## Today\n\nBy the end of today you will...\n\n- Use CLT to construct confidence intervals using a t-distribution\n\n- Bootstrap for a difference in means (if time)\n\n## Load packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0     ✔ purrr   0.3.5\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.1     ✔ stringr 1.4.1\n✔ readr   2.1.3     ✔ forcats 0.5.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'purrr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.0.0 ──\n✔ broom        1.0.1     ✔ rsample      1.1.0\n✔ dials        1.1.0     ✔ tune         1.0.1\n✔ infer        1.0.3     ✔ workflows    1.1.0\n✔ modeldata    1.0.1     ✔ workflowsets 1.0.0\n✔ parsnip      1.0.3     ✔ yardstick    1.1.0\n✔ recipes      1.0.3     \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'broom' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dials' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'parsnip' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'recipes' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Learn how to get started at https://www.tidymodels.org/start/\n```\n:::\n:::\n\n\n## Load Data: Pokemon\n\nWe will be using the `pokemon` data set, which contains information about 42 randomly selected Pokemon (from all generations). Pokemon is a Japanese media franchise managed by The Pokémon Company, founded by Nintendo, Game Freak, and Creatures. Within this franchise, there are over 1000 different pokemon characters. In this activity, we are going to be taking estimating the mean height of them all.\n\n\nYou may load in the data set with the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon <-  read_csv(\"https://sta101.github.io/static/appex/data/pokemon.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 42 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): name, leg_status, type_1, type_2\ndbl (11): pokedex_number, generation, height_m, weight_kg, bst, hp, atk, def...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nIn this analysis, we will use CLT-based inference to draw conclusions about the mean height among all Pokemon species.\n\n### EDA\n\nLet's start by looking at the distribution of `height_m`, the typical height in meters for a Pokemon species, using a visualization and summary statistics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon |>\n  ggplot(\n    aes(x = height_m)\n  ) + \n  geom_histogram(binwidth = .25, fill = \"steelblue\", color = \"black\")\n```\n\n::: {.cell-output-display}\n![](ae-19-A_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nBelow, calculate the mean, standard deviation, and sample size below...\n\n\n::: {.cell}\n\n```{.r .cell-code}\npokemon |>\n  summarise(mean_height = mean(height_m), \n            sd_height = sd(height_m), \n            n_pokemon = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  mean_height sd_height n_pokemon\n        <dbl>     <dbl>     <int>\n1       0.929     0.497        42\n```\n:::\n:::\n\n\n\nNow, we will start on using the Central Limit Theorem to draw conclusions about the $\\mu$, the mean height in the population of Pokemon.\n\n-   What is the point estimate for $\\mu$, i.e., the \"best guess\" for the mean height of all Pokemon? Use proper notation.\n\n-   What is the point estimate for $\\sigma$, i.e., the \"best guess\" for the standard deviation of the distribution of Pokemon heights? Use proper notation. \n\n### CLT Conditions\n\nBefore moving forward, let's check the conditions required to apply the Central Limit Theorem. Are the following conditions met:\n\n-   Independence?\n\n**We have no reason to believe this is violated, as we took a random sample**\n\n-   Sample size?\n\n**Yes, we have a sample size larger than 30**\n\n\n#### Central limit theorem\n\nRemember, when the independence and sample size assumptions are met, the central limit theorem states\n\n\n$$\n\\bar{x} \\sim N(\\mu, \\sigma / \\sqrt{n})\n$$\n\n\nIf we know $\\sigma$, we can construct a symmetric confidence interval for the true mean easily using `qnorm()` (using a normal distribution).\n\nFor example, if the true standard deviation in pokemon height is 0.4 meters, then to construct a 95% confidence interval:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxbar <- pokemon |>\n  summarize(xbar = mean(height_m)) |>\n  pull(xbar)\n\nqnorm(c(0.025, 0.975), mean = xbar, sd = 0.4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.1445858 1.7125570\n```\n:::\n:::\n\n\nThis can be equivalently expressed\n\n\n::: {.cell}\n\n```{.r .cell-code}\nzscore <- qnorm(0.025)\nxbar + zscore*0.4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.1445858\n```\n:::\n\n```{.r .cell-code}\nxbar - zscore*0.4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.712557\n```\n:::\n:::\n\n\n\nIn general, the confidence interval can be written as \n\n\n$$\n\\bar{x} \\pm z^* \\times SD(\\bar{x})\n$$\n\n\n\nwhere $z^*$ is the quantile of a standard normal distribution associated with our level of confidence and the $SD(\\bar{x})$ is $\\sigma / \\sqrt{n})$\n\n**In Practice** \n\nIf $\\sigma$ is unknown, it is more appropriate to be using a t-distribution to account for this additional uncertainty. We estimate the standard deviation of our sample mean with the standard error: \\(\\frac{s}{\\sqrt(n)}\\)\n\n\nMany researchers estimate $\\sigma_\\bar{x}$ with \\(\\frac{s}{\\sqrt(n)}\\) and still use `qnorm()` if our sample size is \"large.\" This is what we did in ae-18 and we will revisit it later in the activity. \n\n### Practical confidence intervals\n\nWe don't know the true population mean $\\mu$ and standard deviation $\\sigma$, how do we use CLT to construct a confidence interval?\n\nWe approximate $\\mu$ by $\\bar{x}$ and $\\sigma$ by with $s$. However $s$ may be smaller than $\\sigma$ and our confidence interval could be too narrow, for example, run the code below to compute the standard deviation of three draws from a standard normal.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples = rnorm(3, mean = 0, sd = 1)\nsd(samples) / 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.4858455\n```\n:::\n:::\n\n\nRun this code a few times to repeat the simulation; you will find that $s$ is sometimes above and sometimes below the true standard deviation we have set to 0.40.\n\nTo account for this uncertainty, we will use a distribution with thicker tails. This sampling distribution is called a **t-distribution**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = data.frame(x = c(0 - 1*3, 0 + 1*3)), aes(x = x)) +\n  stat_function(fun = dnorm, args = list(mean = 0, sd = 1),\n                color = \"black\") +\n  stat_function(fun = dt, args = list(df = 3),\n                color = \"red\",lty = 2) + theme_bw() +\n  labs(title = \"Black solid line = normal, Red dotted line = t-distribution\")\n```\n\n::: {.cell-output-display}\n![](ae-19-A_files/figure-html/t-versus-normal-1.png){width=672}\n:::\n:::\n\n\nThe t-distribution has a bell shape but the extra thick tails help us correct for the variability introduced by using $s$ instead of $\\sigma$.\n\nUnlike the normal distribution.... there are many many many different t-distributions. We can distinguish the differences by their degrees of freedom. The degrees of freedom describes the precise form of the bell-shaped t-distribution. In general, we'll use a t-distribution with $df=n−1$ to model the sample mean when the sample size is $n$.\n\nWe can use `qt` and `pt` to find quantiles and probabilities respectively under the t-distribution.\n\n### Confidence interval\nTo construct our \npractical confidence interval (where we don't know $\\sigma$) we use the t-distribution:\n\n\n$$\n\\bar{x} \\pm t^*_{n-1} \\times \\frac{s}{\\sqrt{n}}\n$$\n\n\n### Confidence Interval \n\n- Calculate the 95% confidence interval for pokemon height using the t-distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntscore <- qt(0.025 , df = 41)\n\ns <- sd(pokemon$height_m)\nn <- nrow(pokemon)\n\nxbar + tscore*(s/sqrt(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.7735551\n```\n:::\n\n```{.r .cell-code}\nxbar - tscore*(s/sqrt(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.083588\n```\n:::\n:::\n\n\n### Penguins \n\nIn the last application exercise, we calculated a 95% confidence interval for true mean flipper length using a normal distribution (see code below). Let's compare the results to a t-distribution... \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'palmerpenguins'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:modeldata':\n\n    penguins\n```\n:::\n\n```{.r .cell-code}\nest_mu <- 201\nest_sigma <- sd(penguins$flipper_length_mm , na.rm = T) / sqrt(344)\n\nqnorm(c(0.025, 0.975), mean = est_mu, sd = est_sigma)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 199.514 202.486\n```\n:::\n\n```{.r .cell-code}\ntscore <- qt(0.025 , df = 343)\nn <- 344\n\nest_mu + tscore*(est_sigma)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 199.5088\n```\n:::\n\n```{.r .cell-code}\nest_mu - tscore*(est_sigma)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 202.4912\n```\n:::\n:::\n\n\n\nAre they the same? Different? \n\n**They are the same because the sample size is large** \n\n\n## Bootstrap for a difference in means \n\nThe Iris Dataset contains four features (length and width of sepals and petals) of 50 samples of three species of Iris (Iris setosa, Iris virginica and Iris versicolor). A sepal is the outer parts of the flower (often green and leaf-like) that enclose a developing bud. The petal are parts of a flower that are the pollen producing part of the flower that are often conspicuously colored. The difference between sepals and petals can be seen below.\n\nThe data were collected in 1936 at the Gaspé Peninsula, in Canada. For the first question of the exam, you will use this data sets to investigate a variety of relationships to learn more about each of these three flower species. The data set is prepackaged in R, and is called `iris`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(iris)\n```\n:::\n\n\nGoal: Previously, we have calculated confidence intervals for a single mean. Now, we are going to calculate confidence intervals for a difference in means.\n\nSpecifically, we are going to calculate the difference in mean Sepal length between the Setosa and Versicolor\n\n## EDA\n\nFirst, we want to filter the data set to only contain our two `Species`. Please create a new data set that achieves this below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_filter <- iris |>\n  filter(Species != \"virginica\")\n```\n:::\n\n\nBelow, calculate and create the following:\n\n-- Mean sepal length for each group\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_filter |>\n  group_by(Species) |>\n  summarize(mean_l = mean(Sepal.Length))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  Species    mean_l\n  <fct>       <dbl>\n1 setosa       5.01\n2 versicolor   5.94\n```\n:::\n:::\n\n\n\n## Central Limit Theorem or Bootstrap?\n\nAre we justified to use the central limit theorem? Why or why not? Use code when able to justify your answer. For this activity, you can assume that these measurements come from a random sample.\n\n**Yes. These data come from a random sample and n is larger than 30 for each group**\n\nSuppose that the flowers did not come from a random sample. What are some ways that the independence assumption could be violated?\n\n**AWV. Think about spatial dependence or time dependence**\n\n## Bootstrap\n\nRegardless of your answer above, we are going to create a 90% confidence interval using bootstrap methods. Before we use R to generate this, let's go over how this distribution is created.\n\nHow is one \"dot\" (observation) created on our bootstrap resampled distribution? Detail the steps below:\n\n-- Resample with replacement *within each group* 50 times. \n\n-- Calculate the new resampled means. \n\n-- Subtract the resampled means.\n\n### Bootstrap Confidence Interval\n\nSimilar to the last exercise... we will use bootstrapping to estimate the variability associated with the difference in sample means when taking repeated samples\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboot_df <- iris_filter|>\n  specify(response = Sepal.Length, explanatory = Species) |>\n  generate(reps = 1000, type = \"bootstrap\") |>\n  calculate(stat = \"diff in means\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nDropping unused factor levels virginica from the supplied explanatory variable 'Species'.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The statistic is based on a difference or ratio; by default, for\ndifference-based statistics, the explanatory variable is subtracted in the\norder \"setosa\" - \"versicolor\", or divided in the order \"setosa\" / \"versicolor\"\nfor ratio-based statistics. To specify this order yourself, supply `order =\nc(\"setosa\", \"versicolor\")` to the calculate() function.\n```\n:::\n:::\n\n\nNow, let's use `boot_df`to create our 90% confidence interval.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboot_df |> \n  summarize(lower = quantile(stat , 0.05),\n            upper = quantile(stat , 0.95))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  lower  upper\n  <dbl>  <dbl>\n1 -1.08 -0.789\n```\n:::\n:::\n\n\nInterpret your 90% confidence interval in the context of the problem below:\n\n**We are 90% confident that the true mean sepal length for setosa is 1.07 to 0.790 smaller than the true mean sepal length for versicolor **\n\nNote about theory based inference for difference in means....\n\nUsing theory based inference is almost identical to the single mean case. However, the standard deviation of our statistic uses both the standard deviation of the first and second group. See the following formula below...\n\n![](images/se-2.png)\n\n![](images/df-2.png)",
    "supporting": [
      "ae-19-A_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}