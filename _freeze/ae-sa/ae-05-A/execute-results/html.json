{
  "hash": "c1885ebc38f34fdad34e7f6253c61afa",
  "result": {
    "markdown": "---\ntitle: \"AE 05: Joining fisheries - Suggested Answers\"\ncategories: \n  - Application exercise\neditor: visual\n---\n\n\n::: callout-important\nGo to the [course GitHub organization](https://github.com/sta199-23-2) and locate the repo titled `ae-05-23-YOUR_GITHUB_USERNAME` to get started.\n\nThis AE is due Saturday, Feb 4 at 11:59pm.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0     ✔ purrr   0.3.5\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.1     ✔ stringr 1.4.1\n✔ readr   2.1.3     ✔ forcats 0.5.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'purrr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(scales)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n```\n:::\n\n```{.r .cell-code}\nfisheries <- read_csv(\"data/fisheries.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 82 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): country\ndbl (3): capture, aquaculture, total\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ncontinents <- read_csv(\"data/continents.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 245 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n## read_csv\n\nBefore we get started, I want to introduce `read_csv`.\n\n`read_csv` reads comma delimited files. The first argument to `read_csv()` is the most important: it's the path to the file to read. This function uses the first line of the data for the column names, which is a very common convention. The data might not have column names. You can use col_names = FALSE to tell read_csv() not to treat the first row as headings, and instead label them: `read_csv(path, col_names = FALSE)`.\n\nAnother option that commonly needs tweaking is na: this specifies the value (or values) that are used to represent missing values in your file: `read_csv(path, na = \"NA\")`\n\n## Working with multiple data frames\n\nOften instead of being provided the data you need for your analysis in a single data frame, you will need to bring information from multiple datasets together into a data frame yourself. These datasets will be linked to each other via a column (usually an identifier, something that links the two datasets together) that you can use to join them together.\n\nThere are many possible types of joins. All have the format `something_join(x, y)`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- tibble(\n  value = c(1, 2, 3),\n  xcol = c(\"x1\", \"x2\", \"x3\")\n  )\n\ny <- tibble(\n  value = c(1, 2, 4),\n  ycol = c(\"y1\", \"y2\", \"y4\")\n  )\n\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  value xcol \n  <dbl> <chr>\n1     1 x1   \n2     2 x2   \n3     3 x3   \n```\n:::\n\n```{.r .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  value ycol \n  <dbl> <chr>\n1     1 y1   \n2     2 y2   \n3     4 y4   \n```\n:::\n:::\n\n\nWe will demonstrate each of the joins on these small, toy datasets.\n\n**Note: These functions below know to join `x` and `y` by `value` because each dataset has `value` as a column. See for yourself!**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"value\" \"xcol\" \n```\n:::\n\n```{.r .cell-code}\nnames(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"value\" \"ycol\" \n```\n:::\n:::\n\n\n### `inner_join()` join all rows in x where there are matching values of y\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninner_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = \"value\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  value xcol  ycol \n  <dbl> <chr> <chr>\n1     1 x1    y1   \n2     2 x2    y2   \n```\n:::\n:::\n\n\n### `left_join()` include all rows in x\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(x , y)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = \"value\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  value xcol  ycol \n  <dbl> <chr> <chr>\n1     1 x1    y1   \n2     2 x2    y2   \n3     3 x3    <NA> \n```\n:::\n:::\n\n\n### `right_join()` includes all rows of y\n\n\n::: {.cell}\n\n```{.r .cell-code}\nright_join(y, x) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = \"value\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  value ycol  xcol \n  <dbl> <chr> <chr>\n1     1 y1    x1   \n2     2 y2    x2   \n3     3 <NA>  x3   \n```\n:::\n:::\n\n\n### `full_join()` includes rows for both x and y\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = \"value\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 3\n  value xcol  ycol \n  <dbl> <chr> <chr>\n1     1 x1    y1   \n2     2 x2    y2   \n3     3 x3    <NA> \n4     4 <NA>  y4   \n```\n:::\n:::\n\n\n### `semi_join()`returns all rows from x that match y\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsemi_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = \"value\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  value xcol \n  <dbl> <chr>\n1     1 x1   \n2     2 x2   \n```\n:::\n:::\n\n\n### `anti_join()` return all rows from x that do not match with y\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanti_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = \"value\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  value xcol \n  <dbl> <chr>\n1     3 x3   \n```\n:::\n:::\n\n\n## Global aquaculture production\n\nThe Fisheries and Aquaculture Department of the Food and Agriculture Organization of the United Nations collects data on fisheries production of countries.\n\n**Goal**: Our goal is to create a visualization of the mean share of aquaculture by continent.\n\nLet's start by looking at the `fisheries` data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(fisheries)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 82\nColumns: 4\n$ country     <chr> \"Angola\", \"Argentina\", \"Australia\", \"Bangladesh\", \"Brazil\"…\n$ capture     <dbl> 486490, 755226, 174629, 1674770, 705000, 629950, 233190, 8…\n$ aquaculture <dbl> 655, 3673, 96847, 2203554, 581230, 172500, 2315, 200765, 9…\n$ total       <dbl> 487145, 758899, 271476, 3878324, 1286230, 802450, 235505, …\n```\n:::\n:::\n\n\nWe have the countries, but our goal is to make a visualization by continent. Let's take a look at the continents data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(continents)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 245\nColumns: 2\n$ country   <chr> \"Afghanistan\", \"Åland Islands\", \"Albania\", \"Algeria\", \"Ameri…\n$ continent <chr> \"Asia\", \"Europe\", \"Europe\", \"Africa\", \"Oceania\", \"Europe\", \"…\n```\n:::\n:::\n\n\n-   **Your turn (2 minutes):**\n    -   Which variable(s) will we use to join the `fisheries` and `continents` data frames?\n\ncountry\n\n    -   We want to keep all rows and columns from `fisheries` and add a column for corresponding continents. Which join function should we use?\n\nfull_join\n\nfull_left\n\n-   **Demo:** Join the two data frames and name assign the joined data frame back to `joined_fish`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\njoined_fish <- fisheries |> \n  left_join(continents)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = \"country\"\n```\n:::\n:::\n\n\n-   **Demo:** Take a look at the updated `joined_fish` data frame. There are some countries that were not in `continents`. In the first code chunk, identify which countries these are (they will have `NA` values for `continent`). In the second code chunk, manually update the `continent` information for these countries using the `case_when` function. Finally, check that these updates have been made as intended and no countries are left without continent information.\n\n\n::: {.cell}\n\n```{.r .cell-code}\njoined_fish |>\n  filter(is.na(continent))\n```\n:::\n\n\nComment through the following code below. Specifically...\n\n-- How is case_when being used? -- Why quotes? -- What does the `~` in words?\\\n-- What is TRUE doing?\n\n\n::: {.cell}\n\n```{.r .cell-code}\njoined_fish <- joined_fish |> \n  mutate(\n    continent = case_when(\n    country == \"Democratic Republic of the Congo\" ~ \"Africa\",\n    country == \"Hong Kong\" ~ \"Asia\",\n    country == \"Myanmar\" ~ \"Asia\", \n    TRUE ~ continent\n    )\n  )\n```\n:::\n\n\n-   **Demo:** Add a new column to the `joined_fish` data frame called `aq_prop`. We will calculate it as `aquaculture / total`. Save the resulting frame as `joined_fish`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\njoined_fish <- joined_fish |>\n  mutate(aq_prop = aquaculture / total)\n```\n:::\n\n\n-   **Your turn (5 minutes):** Now expand your calculations to also calculate the mean, minimum and maximum aquaculture proportion for continents in the fisheries data. Note that the functions for calculating minimum and maximum in R are `min()` and `max()` respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\njoined_fish |>\n  group_by(continent) |>\n  summarize(\n    min_aq_prop = min(aq_prop),\n    max_aq_prop = max(aq_prop),\n    mean_aq_prop = mean(aq_prop)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n  continent min_aq_prop max_aq_prop mean_aq_prop\n  <chr>           <dbl>       <dbl>        <dbl>\n1 Africa        0             0.803       0.0943\n2 Americas      0             0.529       0.192 \n3 Asia          0             0.782       0.367 \n4 Europe        0.00682       0.618       0.165 \n5 Oceania       0.0197        0.357       0.150 \n```\n:::\n:::\n\n\n----------------------- Solution to above answer below -------------------------\n\n-   **Demo:** Using your code above, create a new data frame called `fisheries_summary` that calculates minimum, mean, and maximum aquaculture proportion for each continent in the fisheries data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfisheries_summary <- joined_fish |>\n  group_by(continent) |>\n  summarize(\n    min_aq_prop = min(aq_prop),\n    max_aq_prop = max(aq_prop),\n    mean_aq_prop = mean(aq_prop)\n  )\n```\n:::\n\n\n-   **Demo:** Then, determine which continent has the largest value of `max_ap`. Take the `fisheries_summary` data frame and order the results in descending order of mean aquaculture proportion.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfisheries_summary |>\n  arrange(desc(mean_aq_prop))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n  continent min_aq_prop max_aq_prop mean_aq_prop\n  <chr>           <dbl>       <dbl>        <dbl>\n1 Asia          0             0.782       0.367 \n2 Americas      0             0.529       0.192 \n3 Europe        0.00682       0.618       0.165 \n4 Oceania       0.0197        0.357       0.150 \n5 Africa        0             0.803       0.0943\n```\n:::\n:::\n",
    "supporting": [
      "ae-05-A_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}