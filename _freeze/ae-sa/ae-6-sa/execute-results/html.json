{
  "hash": "54c9e0d0f3f9a906724de9d7bcc894c2",
  "result": {
    "markdown": "---\ntitle: \"AE 06: Suggested Answers\"\ncategories: \n  - Application exercise\neditor: visual\n---\n\n\n## Debegguing\n\nThe questions are left unanswered so you can practice. The solutions are at the end of the document.\n\nIn this activity, we will go over how to identify and fix common coding errors. This demonstration will use the `mtcars` data set. In each of these code chunks, you will either need to add or alter code in order to get it running. Please take notes and treat this AE as a \"common errors debugging sheet\" to use in the future. There will only be one error per code chunk.\n\n1.  First, let's make a quick exploratory plot to assess these data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |> \n  ggplot(\n    aes(x = mpg, y = wt)\n  ) + \n  geom_point()\n```\n:::\n\n\n**Error** -\n\n**Fix** -\n\n2.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |>\n  ggplot(\n    aes(x = mpg, y = gears)\n  ) + \n  geom_point()\n```\n:::\n\n\n**Error** -\n\n**Fix** -\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |>\n  ggplot(\n    aes(x = mpg, y = wt) + \n  geom_point()\n```\n:::\n\n\n**Error** -\n\n**Fix** -\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |>\n  ggplot(\n    aes(x = mpg, y = gear)\n  ) + \n  geom_bar()\n```\n:::\n\n\n**Error** -\n\n**Fix** -\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |>\n  filter(mpg > 17)\n\nmtcars.new |>\n  ggplot(\n    aes(x = mpg, y = wt)\n  ) + \n  geom_point()\n```\n:::\n\n\n**Error** -\n\n**Fix** -\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars \n  |>\n  ggplot(\n    aes(x = mpg, y = wt)\n  ) + \n  geom_point()\n```\n:::\n\n\n**Error** -\n\n**Fix** -\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- mtcars |>\n  mutate(cyl = factor(cyl)) |>\n  ggplot(\n    aes(x = mpg, y = wt, color = cyl)\n  ) + \n  geom_point() \n  \np + scale_color_viridis_c()\n```\n:::\n\n\n**Error** -\n\n**Fix** -\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |>\n  mutate(cyl = factor(cyl)) |>\n  ggplot(\n    aes(x = mpg, y = wt color = cyl)\n  ) + \n  geom_point() \n```\n:::\n\n\n**Error** -\n\n**Fix** -\n\n## HW-1 Demo\n\nThe following code has multiple errors. Let's fix the code to the point where we make the following graph:\n\n![](images/recreate.png)\n\nStrategies:\n\n-   Don't diagnose all errors at once\n\n-   Go line by line\n\nHint: There are four total errors in the code below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(openintro)\n \nduke_forest |>\n  mutate(garage = if_else(str_detect(\"Garage\"), \"Garage\", \"No garage\")) |>\n  ggplot(aes(x = \"price\", fill = garage)) +\n  geom_histogram() +\n  facet_wrap(garage, ncol = 1) +\n  labs(\n    x = Price in $,\n    y = \"\",\n    title = \"Histogram of Price of Homes by Garage or not\",\n    fill = \"Garage or not\"\n  )\n```\n:::\n\n\n## Answers\n\n1.  Need to library tidyverse\n2.  Variable spelled incorrectly\n3.  Need to match up ()\n4.  Does not take argument x and y\n5.  Must define new data set\n6.  Don't have pipe on own line\n7.  \\_c is for continous variable. We need \\_d\n8.  Missing ,\n9.  str_detect is missing `parking` variable. Need to specify which variable to search in Do not need quotes on variable name Need quotes on x axis facet_wrap needs \\~ before variable\n\n## Pivoting StatSci Majors\n\n## Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## Goal\n\nOur ultimate goal in this application exercise is to make the following data visualization.\n\n![](images/statsci-plot.png){fig-alt=\"Line plot of numbers of Statistical Science majors over the years (2011 - 2021). Degree types represented are BS, BS2, AB, AB2. There is an increasing trend in BS degrees and somewhat steady trend in AB degrees.\" fig-align=\"center\"}\n\n## Data\n\nThe data come from the [Office of the University Registrar](https://registrar.duke.edu/registration/enrollment-statistics). They make the data available as a table that you can download as a PDF, but I've put the data exported in a CSV file for you. Let's load that in.\n\nThe first column (variable) is the `degree`, and there are 4 possible degrees: BS (Bachelor of Science), BS2 (Bachelor of Science, 2nd major), AB (Bachelor of Arts), AB2 (Bachelor of Arts, 2nd major). The remaining columns show the number of students graduating with that major in a given academic year from 2011 to 2021.\n\n-   **Your turn (3 minutes):** Take a close look at the plot and describe what it shows in 2-3 sentences.\n\n**Add response**\n\n## Data In\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstatsci <- read_csv(\"data/statsci.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 4 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): degree\ndbl (12): id, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nAnd let's take a look at the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(statsci)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 4\nColumns: 13\n$ id     <dbl> 1, 2, 3, 4\n$ degree <chr> \"Statistical Science (AB2)\", \"Statistical Science (AB)\", \"Stati…\n$ `2011` <dbl> NA, 2, 2, 5\n$ `2012` <dbl> 1, 2, 6, 9\n$ `2013` <dbl> NA, 4, 1, 4\n$ `2014` <dbl> NA, 1, NA, 13\n$ `2015` <dbl> 4, 3, 5, 10\n$ `2016` <dbl> 4, 6, 6, 17\n$ `2017` <dbl> 1, 3, 6, 24\n$ `2018` <dbl> NA, 4, 8, 21\n$ `2019` <dbl> NA, 4, 8, 26\n$ `2020` <dbl> 1, 1, 17, 27\n$ `2021` <dbl> 2, NA, 16, 35\n```\n:::\n\n```{.r .cell-code}\nslice(statsci)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 13\n     id degree    `2011` `2012` `2013` `2014` `2015` `2016` `2017` `2018` `2019`\n  <dbl> <chr>      <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1     1 Statisti…     NA      1     NA     NA      4      4      1     NA     NA\n2     2 Statisti…      2      2      4      1      3      6      3      4      4\n3     3 Statisti…      2      6      1     NA      5      6      6      8      8\n4     4 Statisti…      5      9      4     13     10     17     24     21     26\n# … with 2 more variables: `2020` <dbl>, `2021` <dbl>\n```\n:::\n:::\n\n\nWrite a sentence using inline code that shares the number or rows and columns in these data.\n\nThese data have 4 rows and 13 columns.\n\n-   **Your turn (4 minutes):** Take a look at the plot we aim to make and sketch / think about the data frame we need to make the plot. Determine what each row and each column of the data frame should be. *Hint:* We need data to be in columns to map to `aes`thetic elements of the plot.\n\n**Add response**\n\n## Pivoting\n\n-   **Demo:** Pivot the `statsci` data frame *longer* such that each row represents a degree type / year combination and `year` and `n`umber of graduates for that year are columns in the data frame.\n\nExplain why the following code below accomplishes the question above.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstatsci |>\n  pivot_longer(\n    cols = !c(degree,id),\n    names_to = \"year\",\n    values_to = \"n\"\n  ) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 44 × 4\n      id degree                    year      n\n   <dbl> <chr>                     <chr> <dbl>\n 1     1 Statistical Science (AB2) 2011     NA\n 2     1 Statistical Science (AB2) 2012      1\n 3     1 Statistical Science (AB2) 2013     NA\n 4     1 Statistical Science (AB2) 2014     NA\n 5     1 Statistical Science (AB2) 2015      4\n 6     1 Statistical Science (AB2) 2016      4\n 7     1 Statistical Science (AB2) 2017      1\n 8     1 Statistical Science (AB2) 2018     NA\n 9     1 Statistical Science (AB2) 2019     NA\n10     1 Statistical Science (AB2) 2020      1\n# … with 34 more rows\n```\n:::\n:::\n\n\n-   **Question:** What is the type of the `year` variable? Why? What should it be?\n\nIt's a (categorical/quantitative) variable since the information came from the columns of the original data frame and R cannot know that these character strings represent years. The variable type should be (categorical/quantitative).\n\n-   Demo: Start over with pivoting, and this time also make sure `year` is a numerical variable in the resulting data frame. How do we typically change data types? We can also do it within pivot. How does this code differ from above?\n\n**Add response**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstatsci |>\n  pivot_longer(\n    cols = -c(degree,id),\n    names_to = \"year\",\n    names_transform = as.numeric,\n    values_to = \"n\"\n  )  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 44 × 4\n      id degree                     year     n\n   <dbl> <chr>                     <dbl> <dbl>\n 1     1 Statistical Science (AB2)  2011    NA\n 2     1 Statistical Science (AB2)  2012     1\n 3     1 Statistical Science (AB2)  2013    NA\n 4     1 Statistical Science (AB2)  2014    NA\n 5     1 Statistical Science (AB2)  2015     4\n 6     1 Statistical Science (AB2)  2016     4\n 7     1 Statistical Science (AB2)  2017     1\n 8     1 Statistical Science (AB2)  2018    NA\n 9     1 Statistical Science (AB2)  2019    NA\n10     1 Statistical Science (AB2)  2020     1\n# … with 34 more rows\n```\n:::\n:::\n\n\n-   **Demo:** Add on to your pipeline that you started with pivoting and convert `NA`s in `n` to `0`s.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstatsci |>\n  pivot_longer(\n    cols = !c(id,degree),\n    names_to = \"year\",\n    names_transform = as.numeric,\n    values_to = \"n\"\n  ) |>\n  mutate(n = if_else(is.na(n), 0, n))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 44 × 4\n      id degree                     year     n\n   <dbl> <chr>                     <dbl> <dbl>\n 1     1 Statistical Science (AB2)  2011     0\n 2     1 Statistical Science (AB2)  2012     1\n 3     1 Statistical Science (AB2)  2013     0\n 4     1 Statistical Science (AB2)  2014     0\n 5     1 Statistical Science (AB2)  2015     4\n 6     1 Statistical Science (AB2)  2016     4\n 7     1 Statistical Science (AB2)  2017     1\n 8     1 Statistical Science (AB2)  2018     0\n 9     1 Statistical Science (AB2)  2019     0\n10     1 Statistical Science (AB2)  2020     1\n# … with 34 more rows\n```\n:::\n:::\n\n\nNote: Once you have the correct code, change `eval: false` to `eval: true` OR delete the code altogether.\n\n-   **Demo:** In our plot the degree types are BS, BS2, AB, and AB2. This information is in our dataset, in the `degree` column, but this column also has additional characters we don't need. Create a new column called `degree_type` with levels BS, BS2, AB, and AB2 (in this order) based on `degree`.\n\n-- Use separate to separate the degree_type column -- Comment on what str_remove is doing -- Comment on what fct_relevel is doing\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstatsci |>\n  pivot_longer(\n    cols = !c(id,degree),\n    names_to = \"year\",\n    names_transform = as.numeric,\n    values_to = \"n\"\n  ) |>\n  mutate(n = if_else(is.na(n), 0, n)) |>\n  separate(degree, sep = \"\\\\(\" , into = c(\"major\", \"degree_type\")) |>\n  mutate(\n    degree_type = str_remove(degree_type, \"\\\\)\"),\n    degree_type = fct_relevel(degree_type, \"BS\", \"BS2\", \"AB\", \"AB2\")\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 44 × 5\n      id major                  degree_type  year     n\n   <dbl> <chr>                  <fct>       <dbl> <dbl>\n 1     1 \"Statistical Science \" AB2          2011     0\n 2     1 \"Statistical Science \" AB2          2012     1\n 3     1 \"Statistical Science \" AB2          2013     0\n 4     1 \"Statistical Science \" AB2          2014     0\n 5     1 \"Statistical Science \" AB2          2015     4\n 6     1 \"Statistical Science \" AB2          2016     4\n 7     1 \"Statistical Science \" AB2          2017     1\n 8     1 \"Statistical Science \" AB2          2018     0\n 9     1 \"Statistical Science \" AB2          2019     0\n10     1 \"Statistical Science \" AB2          2020     1\n# … with 34 more rows\n```\n:::\n:::\n\n\n-   **Your turn (5 minutes):** Now we start making our plot, but let's not get too fancy right away. Create the following plot, which will serve as the \"first draft\" on the way to our [Goal]. Do this by adding on to your pipeline from earlier.\n\n![](images/statsci-plot-draft.png){fig-alt=\"Line plot of numbers of Statistical Science majors over the years (2011 - 2021). Degree types represented are BS, BS2, AB, AB2. There is an increasing trend in BS degrees and somewhat steady trend in AB degrees.\" fig-align=\"center\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstatsci |>\n  pivot_longer(\n    cols = !c(id,degree),\n    names_to = \"year\",\n    names_transform = as.numeric,\n    values_to = \"n\"\n  ) |>\n  mutate(n = if_else(is.na(n), 0, n)) |>\n  separate(degree, sep = \" \\\\(\", into = c(\"major\", \"degree_type\")) |>\n  mutate(\n    degree_type = str_remove(degree_type, \"\\\\)\"),\n    degree_type = fct_relevel(degree_type, \"BS\", \"BS2\", \"AB\", \"AB2\")\n    ) |> \n  ggplot(\n    aes(x = year, y = n, color = degree_type)\n  ) + \n  geom_point() + \n  geom_line()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}