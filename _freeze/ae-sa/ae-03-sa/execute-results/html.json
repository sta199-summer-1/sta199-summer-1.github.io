{
  "hash": "ec916aa97fb99dcfe6c0f44b5e223177",
  "result": {
    "markdown": "---\ntitle: \"Data Viz + Data Manipulation\"\nsubtitle: \"Suggested Answers\"\nformat: html\neditor: visual\n---\n\n\n::: callout-important\nGo to the [course GitHub organization](https://github.com/sta199-summer-1) and locate the repo titled `ae-03-YOUR_GITHUB_USERNAME` to get started.\n\nThis AE is due Friday, May 26th at 11:59pm.\n:::\n\n## Packages\n\n\n::: {.cell}\n\n:::\n\n\nLet's remind ourselves what the following code chunk labels are doing above:\n\nlabel: load-packages - name of your code chunk warning: false - hide warnings message: false - hide messages echo: false - Code will not show up in PDF eval: false - Code will not run when you make PDF\n\n## Data\n\nThese data were collected from 2007 - 2009 by Dr. Kristen Gorman with the Palmer Station Long Term Ecological Research Program, part of the US Long Term Ecological Research Network. The data were imported directly from the Environmental Data Initiative (EDI) Data Portal, and are available for use by CC0 license (\"No Rights Reserved\") in accordance with the Palmer Station Data Policy.\n\n## Mapping Variables (Coding Warm Up)\n\nBelow, the researcher is trying to create a scatterplot between flipper length and bill length. They also want to color all the points red (for some reason).\n\nBelow, run the two sets of code. Why does the first set of code not run?\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(\n    aes(x = flipper_length_mm, y = bill_length_mm , color = \"red\")\n  ) + \n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](ae-03-sa_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\npenguins |>\n  ggplot(\n    aes(x = flipper_length_mm, y = bill_length_mm)\n  ) + \n  geom_point(color = \"red\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](ae-03-sa_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n:::\n\n\n**Add response**\n\n## Plot Recreation\n\nWe can use multiple geoms on a single plot! Be deliberate about the order of plotting. Our task is to recreate the following image below. Hint: This plot uses `theme_minimal` and `scale_color_viridis_d(option = \"D\")`.\n\nNote: Themes are a powerful way to customize the non-data components of your plots: i.e. titles, labels, fonts, background, gridlines, and legends: `theme()`. This is different than theme_minimal. Hint: pull up the help file for `theme()` and search for legend.position.\n\n![](plot1.png){width=\"650\" height=\"400\" fig-align=\"center\"}\n\n1.  Make your own code chunk below\n\n2.  Recreate the plot\n\nStart your code chunk here. Make sure to give it an appropriate label:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(\n    aes(x = body_mass_g , y = species, color = species)\n  ) +\n  labs(title = \"Weight Distribution of Penguins\",\n       x = \"Weight\",\n       y = \"Species\") +\n  geom_point(position = \"jitter\") +\n  geom_boxplot() +\n  scale_color_viridis_d(option = \"D\") + \n  theme_minimal() +\n  theme(legend.position = \"none\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](ae-03-sa_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nAbove, we made note to \"be deliberate about the order of plotting.\" Let's show why. Switch the order of the geoms used above and re-run your code. What happened?\n\n*Add Response*\n\n# Data Wrangling\n\nTo demonstrate data wrangling we will use `flights`, a tibble in the **nycflights13** R package. It includes characteristics of all flights departing from New York City (JFK, LGA, EWR) in 2013.\n\n## Tibble vs. data frame\n\nA **tibble** is an opinionated version of the `R` data frame. In other words, all tibbles are data frames, but not all data frames are tibbles!\n\nThere are many differences between a tibble and a data frame. The main one is...\n\n1.  When you print a tibble, the first ten rows and all of the columns that fit on the screen will display, along with the type of each column.\n\nLet's look at the differences in the output when we type `flights` (tibble) in the console versus typing `cars` (data frame) in the console.\n\n## The pipe (a review)\n\nBefore working with more data wrangling functions, let's formally introduce the pipe. The **pipe**, `|>`, is an operator (a tool) for passing information from one process to another. We will use `|>` mainly in data pipelines to pass the output of the previous line of code as the first input of the next line of code.\n\nWhen reading code \"in English\", say \"and then\" whenever you see a pipe.\n\n# Data wrangling with `dplyr`\n\n**dplyr** is the primary package in the tidyverse for data wrangling. [Click here](https://dplyr.tidyverse.org/) for the dplyr reference page. [Click here](https://github.com/rstudio/cheatsheets/raw/master/data-transformation.pdf) for the dplyr cheatsheet.\n\nQuick summary of key dplyr functions[^1]:\n\n[^1]: From [dplyr vignette](https://dplyr.tidyverse.org/articles/dplyr.html)\n\n**Rows:**\n\n-   `filter()`:chooses rows based on column values.\n-   `slice()`: chooses rows based on location.\n-   `arrange()`: changes the order of the rows\n-   `sample_n()`: take a random subset of the rows\n\n**Columns:**\n\n-   `select()`: changes whether or not a column is included.\n-   `rename()`: changes the name of columns.\n-   `mutate()`: changes the values of columns and creates new columns.\n\n**Groups of rows:**\n\n-   `summarise()`: collapses a group into a single row.\n-   `count()`: count unique values of one or more variables.\n-   `group_by()`: perform calculations separately for each value of a variable\n\n# Activities\n\n## `select()`\n\n-   Demo: Make a data frame that only contains the variables `dep_delay` and `arr_delay`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(dep_delay, arr_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 2\n   dep_delay arr_delay\n       <dbl>     <dbl>\n 1         2        11\n 2         4        20\n 3         2        33\n 4        -1       -18\n 5        -6       -25\n 6        -4        12\n 7        -5        19\n 8        -3       -14\n 9        -3        -8\n10        -2         8\n# … with 336,766 more rows\n```\n:::\n:::\n\n\n-   Demo: Make a data frame that keeps every variable except `dep_delay`. Call the new data frame `new.data`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew.data <- flights |> \n  select(-dep_delay)\n```\n:::\n\n\n-   In the console, type `1:10` and hit enter. What happened?\n\n-   Demo: Make a data frame that includes all variables between `year` through `dep_delay` (inclusive). These are all variables that provide information about the departure of each flight.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  select(year:dep_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 6\n    year month   day dep_time sched_dep_time dep_delay\n   <int> <int> <int>    <int>          <int>     <dbl>\n 1  2013     1     1      517            515         2\n 2  2013     1     1      533            529         4\n 3  2013     1     1      542            540         2\n 4  2013     1     1      544            545        -1\n 5  2013     1     1      554            600        -6\n 6  2013     1     1      554            558        -4\n 7  2013     1     1      555            600        -5\n 8  2013     1     1      557            600        -3\n 9  2013     1     1      557            600        -3\n10  2013     1     1      558            600        -2\n# … with 336,766 more rows\n```\n:::\n:::\n\n\n-   Demo: Use the `select` helper `contains()` to make a data frame that includes the variables associated with the arrival, i.e., contains the string `\"arr_\"` in the name. Reminder: Thinking about code as **sentences** can help make nesting functions more intuitive.\n\nHint: Run `?contains` and click Select variables that match a pattern. Scroll down to the examples. Next answer the question below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(contains(\"arr_\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 3\n   arr_time sched_arr_time arr_delay\n      <int>          <int>     <dbl>\n 1      830            819        11\n 2      850            830        20\n 3      923            850        33\n 4     1004           1022       -18\n 5      812            837       -25\n 6      740            728        12\n 7      913            854        19\n 8      709            723       -14\n 9      838            846        -8\n10      753            745         8\n# … with 336,766 more rows\n```\n:::\n:::\n\n\n-   Review: Why is *arr\\_*in quotes?\n\n**Add response here**\n\nThis is a good time to render and push to GitHub. Let's go through this demonstration now. **This is how you will turn in your AEs for the summer session**\n\n## `slice()`\n\n-   Demo: Display the first five rows of the `flights` data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 19\n   year month   day dep_time sched_dep…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n  <int> <int> <int>    <int>       <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n1  2013     1     1      517         515       2     830     819      11 UA     \n2  2013     1     1      533         529       4     850     830      20 UA     \n3  2013     1     1      542         540       2     923     850      33 AA     \n4  2013     1     1      544         545      -1    1004    1022     -18 B6     \n5  2013     1     1      554         600      -6     812     837     -25 DL     \n# … with 9 more variables: flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>, and abbreviated variable names ¹​sched_dep_time,\n#   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\n-   Demo: Display the last two rows of the `flights` data frame. Hint: `n()` produces the number of the last row in the data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  slice((n()-1):n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 19\n   year month   day dep_time sched_dep…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n  <int> <int> <int>    <int>       <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n1  2013     9    30       NA        1159      NA      NA    1344      NA MQ     \n2  2013     9    30       NA         840      NA      NA    1020      NA MQ     \n# … with 9 more variables: flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>, and abbreviated variable names ¹​sched_dep_time,\n#   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n\n```{.r .cell-code}\n# OR\n\nflights |>\n  slice_tail(n = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 19\n   year month   day dep_time sched_dep…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n  <int> <int> <int>    <int>       <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n1  2013     9    30       NA        1159      NA      NA    1344      NA MQ     \n2  2013     9    30       NA         840      NA      NA    1020      NA MQ     \n# … with 9 more variables: flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>, and abbreviated variable names ¹​sched_dep_time,\n#   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\n## `arrange()`\n\n-   Demo: Let's arrange the data by departure delay, so the flights with the **shortest** departure delays will be at the top of the data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  arrange(dep_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013    12     7     2040       2123     -43      40    2352      48 B6     \n 2  2013     2     3     2022       2055     -33    2240    2338     -58 DL     \n 3  2013    11    10     1408       1440     -32    1549    1559     -10 EV     \n 4  2013     1    11     1900       1930     -30    2233    2243     -10 DL     \n 5  2013     1    29     1703       1730     -27    1947    1957     -10 F9     \n 6  2013     8     9      729        755     -26    1002     955       7 MQ     \n 7  2013    10    23     1907       1932     -25    2143    2143       0 EV     \n 8  2013     3    30     2030       2055     -25    2213    2250     -37 MQ     \n 9  2013     3     2     1431       1455     -24    1601    1631     -30 9E     \n10  2013     5     5      934        958     -24    1225    1309     -44 B6     \n# … with 336,766 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\n-   Demo: Now let's arrange the data by descending departure delay, so the flights with the **longest** departure delays will be at the top. Hint, run `?desc` in the console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  arrange(desc(dep_delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     9      641        900    1301    1242    1530    1272 HA     \n 2  2013     6    15     1432       1935    1137    1607    2120    1127 MQ     \n 3  2013     1    10     1121       1635    1126    1239    1810    1109 MQ     \n 4  2013     9    20     1139       1845    1014    1457    2210    1007 AA     \n 5  2013     7    22      845       1600    1005    1044    1815     989 MQ     \n 6  2013     4    10     1100       1900     960    1342    2211     931 DL     \n 7  2013     3    17     2321        810     911     135    1020     915 DL     \n 8  2013     6    27      959       1900     899    1236    2226     850 DL     \n 9  2013     7    22     2257        759     898     121    1026     895 DL     \n10  2013    12     5      756       1700     896    1058    2020     878 AA     \n# … with 336,766 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\n-   **Your turn (5 minutes):** Create a data frame that only includes the plane tail number (`tailnum`), carrier (`carrier`), and departure delay for the flight with the longest departure delay. What is the plane tail number (`tailnum`) for this flight?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(tailnum, carrier, dep_delay) |>\n  arrange(desc(dep_delay)) |>\n  slice(1) |>\n  select(tailnum)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  tailnum\n  <chr>  \n1 N384HA \n```\n:::\n:::\n",
    "supporting": [
      "ae-03-sa_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}