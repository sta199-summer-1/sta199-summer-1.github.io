{
  "hash": "3ccb739a2d46ac1356ff198277c2b1f7",
  "result": {
    "markdown": "---\ntitle: \"Joining Fisheries + Tidy Data\"\nsubtitle: \"Suggested Answers\"\nformat: html\neditor: visual\n---\n\n\n# Summary of last class\n\n## Global aquaculture production\n\nThe Fisheries and Aquaculture Department of the Food and Agriculture Organization of the United Nations collects data on fisheries production of countries.\n\n**Our goal is to create a visualization of the mean share of aquaculture by continent.**\n\n![](images/aquaculture-production-by-continent.png){fig-align=\"center\"}\n\n-   **Your turn (2 minutes):**\n    -   Which variable(s) will we use to join the `fisheries` and `continents` data frames?\n    -   We want to keep all rows and columns from `fisheries` and add a column for corresponding continents. Which join function should we use?\n-   **Demo:** Join the two data frames and name assign the joined data frame back to `fisheries`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0     ✔ purrr   0.3.5\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.1     ✔ stringr 1.4.1\n✔ readr   2.1.3     ✔ forcats 0.5.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'purrr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(scales)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfisheries <- read_csv(\"data/fisheries.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 82 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): country\ndbl (3): capture, aquaculture, total\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\ncontinents <- read_csv(\"data/continents.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 245 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfisheries <- fisheries |>\n  left_join(continents)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = \"country\"\n```\n:::\n\n```{.r .cell-code}\n#same as the following\n\nleft_join(fisheries, continents)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = c(\"country\", \"continent\")\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 82 × 5\n   country    capture aquaculture   total continent\n   <chr>        <dbl>       <dbl>   <dbl> <chr>    \n 1 Angola      486490         655  487145 Africa   \n 2 Argentina   755226        3673  758899 Americas \n 3 Australia   174629       96847  271476 Oceania  \n 4 Bangladesh 1674770     2203554 3878324 Asia     \n 5 Brazil      705000      581230 1286230 Americas \n 6 Cambodia    629950      172500  802450 Asia     \n 7 Cameroon    233190        2315  235505 Africa   \n 8 Canada      874727      200765 1075492 Americas \n 9 Chad        110000          94  110094 Africa   \n10 Chile      1829238     1050117 2879355 Americas \n# … with 72 more rows\n```\n:::\n:::\n\n\n# Start\n\n-   **Demo:** Take a look at the updated `fisheries` data frame. There are some countries that were not in `continents`. First, identify which countries these are (they will have `NA` values for `continent`). Then, manually update the `continent` information for these countries using the `case_when` function. Finally, check that these updates have been made as intended and no countries are left without continent information.\n\nHint: Run `?is.na` in the Console\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfisheries |>\n  filter(is.na(continent))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n  country                          capture aquaculture   total continent\n  <chr>                              <dbl>       <dbl>   <dbl> <chr>    \n1 Democratic Republic of the Congo  237372        3161  240533 <NA>     \n2 Hong Kong                         142775        4258  147033 <NA>     \n3 Myanmar                          2072390     1017644 3090034 <NA>     \n```\n:::\n:::\n\n\n## Break for if_else practice\n\nRun `?if_else` if the Console.\n\nLet's use the mock `y` data set to answer this question.\n\nLet's make a new column called `ind`. In this column, if the input of `value` is larger than 3, make the input of the `ind` column say \"yes\". If not, make it say no.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- tibble(\n  value = c(1, 2, 4),\n  ycol = c(\"y1\", \"y2\", \"y4\")\n  )\n\nnames(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"value\" \"ycol\" \n```\n:::\n\n```{.r .cell-code}\nnew.data <- y |>\n  mutate(ind = if_else(value > 3, \"yes\" , \"no\"))  \n```\n:::\n\n\nBelow fixes the `NA` with the appropriate country. Run `?case_when` and comment through each line of code below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfisheries <- fisheries |> # data then\n  mutate( # create or change variables\n    continent = case_when(\n    country == \"Democratic Republic of the Congo\" ~ \"Africa\",\n    country == \"Hong Kong\" ~ \"Asia\",\n    country == \"Myanmar\" ~ \"Asia\", \n    TRUE ~ continent\n    )\n  )\n```\n:::\n\n\n-   **Demo:** Add a new column to the `fisheries` data frame called `aq_prop`. We will calculate it as `aquaculture / total`. Save the resulting frame as `fisheries`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfisheries <- fisheries |> \n  mutate(aq_prop = aquaculture / total )\n```\n:::\n\n\n-   **Your turn (5 minutes):** Now expand your calculations to also calculate the mean, minimum and maximum aquaculture proportion for continents in the fisheries data. Note that the functions for calculating minimum and maximum in R are `min()` and `max()` respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfisheries |> \n  group_by(continent) |>\n  summarize(min_aq_prop = min(aq_prop),\n            mean_aq_prop = mean(aq_prop),\n            max_aq_prop = max(aq_prop))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n  continent min_aq_prop mean_aq_prop max_aq_prop\n  <chr>           <dbl>        <dbl>       <dbl>\n1 Africa        0             0.0943       0.803\n2 Americas      0             0.192        0.529\n3 Asia          0             0.367        0.782\n4 Europe        0.00682       0.165        0.618\n5 Oceania       0.0197        0.150        0.357\n```\n:::\n:::\n\n\n-   **Demo:** Using your code above, create a new data frame called `fisheries_summary` that calculates minimum, mean, and maximum aquaculture proportion for each continent in the fisheries data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfisheries_summary <- fisheries |> \n  group_by(continent) |>\n  summarize(min_aq_prop = min(aq_prop),\n            mean_aq_prop = mean(aq_prop),\n            max_aq_prop = max(aq_prop))\n```\n:::\n\n\n-   **Demo:** Then, determine which continent has the largest value of `max_ap`. Take the `fisheries_summary` data frame and order the results in descending order of max aquaculture proportion.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfisheries_summary |>\n  arrange(desc(max_aq_prop))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n  continent min_aq_prop mean_aq_prop max_aq_prop\n  <chr>           <dbl>        <dbl>       <dbl>\n1 Africa        0             0.0943       0.803\n2 Asia          0             0.367        0.782\n3 Europe        0.00682       0.165        0.618\n4 Americas      0             0.192        0.529\n5 Oceania       0.0197        0.150        0.357\n```\n:::\n:::\n\n\n-   **Demo:** Recreate the following plot using the data frame you have developed so far.\n\n![](images/aquaculture-production-by-continent.png){fig-align=\"center\"}\n\nHint: https://ggplot2.tidyverse.org/reference/geom_bar.html\n\nHint: https://forcats.tidyverse.org/reference/fct_reorder.html\n\nHint: We can control labels using `scale_x_continious` or `scale_y_continous`. Within this function, we can change label specifications: https://scales.r-lib.org/reference/label_percent.html\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfisheries_summary |>\n  ggplot(\n    aes(y = fct_reorder(continent , mean_aq_prop) , x = mean_aq_prop)\n  ) +\n  geom_col() +\n  labs(title = \"Average share of aquaculture by continent\",\n       subtitle = \"out of total fisheries harvest, 2016\",\n       x = NULL, \n       y = NULL) + \n  scale_x_continuous(label = label_percent(accuracy = 1))\n```\n\n::: {.cell-output-display}\n![](ae-05-sa_files/figure-html/fisheries-summary-plot-1.png){width=672}\n:::\n:::\n\n\n## Pivot Practice\n\nRun the following code below. Are these data in long or wide format? Why?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- tibble(\n  state = rep(c(\"MT\", \"NC\" , \"SC\"),2),\n  group = c(rep(\"C\", 3), rep(\"D\", 3)),\n  obs = c(1:6)\n  )\n\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  state group   obs\n  <chr> <chr> <int>\n1 MT    C         1\n2 NC    C         2\n3 SC    C         3\n4 MT    D         4\n5 NC    D         5\n6 SC    D         6\n```\n:::\n:::\n\n\nPivot these data so that the data are wide. i.e. Each state should be it's own unique observation (row). Save this new data set as `y`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- x |> \n  pivot_wider(names_from = group, values_from = obs)\n```\n:::\n\n\nNow, let's change it back. Introducing `pivot_longer`. There are three things we need to consider with `pivot_longer`:\n\n-   What the columns will be\n-   `names_to`\n-   `values_to`\n\nHint: !variable.name can be read as \"not this variable\" or \"everything but this variable\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny |>\n  pivot_longer(cols = c(C,D), names_to = \"group\" , values_to = \"obs\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  state group   obs\n  <chr> <chr> <int>\n1 MT    C         1\n2 MT    D         4\n3 NC    C         2\n4 NC    D         5\n5 SC    C         3\n6 SC    D         6\n```\n:::\n:::\n\n\n## Pivot Practice 2\n\nLet's try this on a real data set.\n\nThe Portland Trailblazers are a National Basketball Association (NBA) sports team. These data reflect the points scored by 9 Portland Trailblazers players across the first 10 games of the 2021-2022 NBA season.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrailblazer <- read_csv(\"data/trailblazer21.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 9 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): Player\ndbl (10): Game1_Home, Game2_Home, Game3_Away, Game4_Home, Game5_Home, Game6_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n-- Take a slice at the data. Are these data in wide or long format?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslice(trailblazer)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 11\n  Player Game1…¹ Game2…² Game3…³ Game4…⁴ Game5…⁵ Game6…⁶ Game7…⁷ Game8…⁸ Game9…⁹\n  <chr>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 Damia…      20      19      12      20      25      14      20      26       4\n2 CJ Mc…      24      28      20      25      14      25      20      21      27\n3 Norma…      14      16      NA      NA      12      14      22      23      25\n4 Rober…       8       6       0       3       9       6       0       6      19\n5 Jusuf…      20       9       4      17      14      13       7       6      10\n6 Cody …       5       5       8      10       9       6       0       7       0\n7 Anfer…      11      18      12      17       5      19      17      15      16\n8 Larry…       2       8       5       8       3       8       7       0       2\n9 Nassi…       7      11       5       9       8       8       4       0       7\n# … with 1 more variable: Game10_Home <dbl>, and abbreviated variable names\n#   ¹​Game1_Home, ²​Game2_Home, ³​Game3_Away, ⁴​Game4_Home, ⁵​Game5_Home,\n#   ⁶​Game6_Away, ⁷​Game7_Away, ⁸​Game8_Away, ⁹​Game9_Home\n```\n:::\n:::\n\n\n-- Pivot the data so that you have columns for `Player`, `Game`, `Points`. Save this as a new data set called `new.blazer`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew.blazer <- trailblazer |>\n  pivot_longer(cols = !Player,\n               names_to = \"Game\", \n               values_to = \"Points\")\n```\n:::\n\n\n-- Suppose now that you are asked to have two separate columns within these data. One column to represent `Game`, and one to represent `Location`. Make this happen below. Save your new data set as `new.blazer`\n\nHint: Run `?separate` in the Console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrailblazer |> \n  pivot_longer(cols = !Player,\n               names_to = \"Game\",\n               values_to = \"Points\") |>\n  separate(Game, sep = \"_\", into = c(\"Game\" , \"Location\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 90 × 4\n   Player         Game   Location Points\n   <chr>          <chr>  <chr>     <dbl>\n 1 Damian Lillard Game1  Home         20\n 2 Damian Lillard Game2  Home         19\n 3 Damian Lillard Game3  Away         12\n 4 Damian Lillard Game4  Home         20\n 5 Damian Lillard Game5  Home         25\n 6 Damian Lillard Game6  Away         14\n 7 Damian Lillard Game7  Away         20\n 8 Damian Lillard Game8  Away         26\n 9 Damian Lillard Game9  Home          4\n10 Damian Lillard Game10 Home         25\n# … with 80 more rows\n```\n:::\n:::\n",
    "supporting": [
      "ae-05-sa_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}