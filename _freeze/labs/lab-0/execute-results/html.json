{
  "hash": "ed300bde71bba5ba334c3dec0c2b630c",
  "result": {
    "markdown": "---\ntitle: \"Lab 0 - Hello R!\"\ncategories: \"Lab\"\nexecute:\n  eval: false\n---\n\n\n::: callout-important\nThis lab is **due May 22nd at Noon**\n:::\n\n::: callout-important\nThis lab is **not a part of your grade in this course**. You should still submit your completed lab to Gradescope to practice submitting to Gradescope and receive feedback.\n:::\n\nThis lab will introduce you to the course computing workflow. The main goal is to demo R and RStudio outside of lecture in a more independent setting. **Note** This lab is meant to **reinforce** what you have learned the last two lectures. Coding is a new language and is not learned in a single day.\n\n::: callout-note\nR is the name of the programming language itself and RStudio is a convenient interface.\n:::\n\nAn additional goal is to reinforce Git and GitHub, the collaboration and version control system that we will be using throughout the course.\n\n::: callout-note\nGit is a version control system (like \"Track Changes\" features from Microsoft Word but more powerful) and GitHub is the home for your Git-based projects on the internet (like DropBox but much better).\n:::\n\nAs the labs progress, you are encouraged to explore beyond what the labs dictate; a willingness to experiment will make you a much better programmer. Before we get to that stage, however, you need to build some basic fluency in R. Today we begin with the fundamental building blocks of R and RStudio: the interface, reading in data, and basic commands.\n\nTo make versioning simpler, this and the next lab are solo labs. In the future, you'll learn about collaborating on GitHub and producing a single lab report for your lab team, but for now, concentrate on getting the basics down.\n\nBy the end of the lab, you will...\n\n-   Be familiar with the workflow using R, RStudio, Git, and GitHub\n-   Gain practice writing a reproducible report using Quarto\n-   Practice version control using GitHub\n-   Be able to create data visualizations using `ggplot2`\n\n# Getting started\n\n::: callout-important\nYour lab TA will lead you through the Getting Started and Packages sections.\n:::\n\n## Log in to RStudio\n\n-   Go to <https://cmgr.oit.duke.edu/containers> and login with your Duke NetID and Password.\n-   Click `STA198-199` to log into the Docker container. You should now see the RStudio environment.\n\n::: callout-warning\nIf you haven't yet done so, you will need to reserve a container for `STA198-199` first.\n:::\n\n## Set up your SSH key\n\nYou will authenticate GitHub using SSH. Below are an outline of the authentication steps; you are encouraged to follow along as your TA demonstrates the steps.\n\n::: callout-note\nYou only need to do this authentication process one time on a single system.\n:::\n\n-   Type `credentials::ssh_setup_github()` into your console.\n-   R will ask \"No SSH key found. Generate one now?\" You should click 1 for yes.\n-   You will generate a key. It will begin with \"ssh-rsa....\" R will then ask \"Would you like to open a browser now?\" You should click 1 for yes.\n-   You may be asked to provide your GitHub username and password to log into GitHub. After entering this information, you should paste the key in and give it a name. You might name it in a way that indicates where the key will be used, e.g., `sta199`).\n\nYou can find more detailed instructions [here](https://github.com/DukeStatSci/github_auth_guide) if you're interested.\n\n## Configure Git\n\nThere is one more thing we need to do before getting started on the assignment. Specifically, we need to configure your git so that RStudio can communicate with GitHub. This requires two pieces of information: your name and email address.\n\nTo do so, you will use the `use_git_config()` function from the `usethis` package. (And we also need to install a package called `gert` just for this step.)\n\nType the following lines of code in the **console** in RStudio filling in your name and the email address associated with your GitHub account.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github(\"r-lib/gert\")\n\nusethis::use_git_config(\n  user.name = \"Your name\", \n  user.email = \"Email associated with your GitHub account\"\n  )\n```\n:::\n\n\nFor example, mine would be\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github(\"r-lib/gert\")\n\nusethis::use_git_config(\n  user.name = \"Elijah Meyer\", \n  user.email = \"elijah.meyer@duke.edu\"\n  )\n```\n:::\n\n\nYou are now ready interact with GitHub via RStudio!\n\n## Clone the repo & start new RStudio project\n\n-   Go to the course organization at [github.com/sta199-summer-1](https://github.com/sta199-summer-1) organization on GitHub. Click on the repo with the prefix **lab-0**. It contains the starter documents you need to complete the lab.\n\n-   If you do not see your lab0 repo, you need to fill out the *Getting to know you survey on Sakai*. Next, go to https://github.com/ElijahMeyer3/lab-0-public to find your lab-0 repo and follow the directions below.\n\n-   Click on the green **CODE** button, select **Use SSH** (this might already be selected by default, and if it is, you'll see the text **Clone with SSH**). Click on the clipboard icon to copy the repo URL.\n\n-   In RStudio, go to *File* ➛ *New Project* ➛*Version Control* ➛ *Git*.\n\n-   Copy and paste the URL of your assignment repo into the dialog box *Repository URL*. Again, please make sure to have *SSH* highlighted under *Clone* when you copy the address.\n\n-   Click *Create Project*, and the files from your GitHub repo will be displayed in the *Files* pane in RStudio.\n\n-   Click *lab0.qmd* to open the template Quarto file. This is where you will write up your code and narrative for the lab.\n\n## R and R Studio\n\nBelow are the components of the RStudio IDE.\n\n![](images/lab-0/rstudio.png){fig-alt=\"RStudio IDE\"}\n\nBelow are the components of a Quarto (.qmd) file.\n\n![](images/lab-0/quarto.png){fig-alt=\"Quarto document\"}\n\n## YAML\n\nThe top portion of your R Markdown file (between the three dashed lines) is called **YAML**. It stands for \"YAML Ain't Markup Language\". It is a human friendly data serialization standard for all programming languages. All you need to know is that this area is called the YAML (we will refer to it as such) and that it contains meta information about your document.\n\n::: callout-important\nOpen the Quarto (`.qmd`) file in your project, change the author name to your name, and render the document. Examine the rendered document.\n:::\n\n## Committing changes\n\nNow, go to the Git pane in your RStudio instance. This will be in the top right hand corner in a separate tab.\n\nIf you have made changes to your Quarto (.qmd) file, you should see it listed here. Click on it to select it in this list and then click on **Diff**. This shows you the *diff*erence between the last committed state of the document and its current state including changes. You should see deletions in red and additions in green.\n\nIf you're happy with these changes, we'll prepare the changes to be pushed to your remote repository. First, **stage** your changes by checking the appropriate box on the files you want to prepare. Next, write a meaningful commit message (for instance, \"updated author name\") in the **Commit message** box. Finally, click **Commit**. Note that every commit needs to have a commit message associated with it.\n\nYou don't have to commit after every change, as this would get quite tedious. You should commit states that are *meaningful to you* for inspection, comparison, or restoration.\n\nIn the first few assignments we will tell you exactly when to commit and in some cases, what commit message to use. As the semester progresses we will let you make these decisions.\n\nNow let's make sure all the changes went to GitHub. Go to your GitHub repo and refresh the page. You should see your commit message next to the updated files. If you see this, all your changes are on GitHub and you're good to go!\n\n## Push changes\n\nNow that you have made an update and committed this change, it's time to push these changes to your repo on GitHub.\n\nIn order to push your changes to GitHub, you must have **staged** your **commit** to be pushed. click on **Push**.\n\n# Packages\n\nIn this lab we will work with two packages:\n\n-   **datasauRus** which contains the dataset, and\n-   **tidyverse** which is a collection of packages for doing data analysis in a \"tidy\" way.\n\n**Render** the document which loads these two packages with the `library()` function.\n\n::: callout-note\nThe rendered document will include a message about which packages the tidyverse packages is loading along with it. It's just R being informative, a **message** does not indicate anything is wrong (it's not a **warning** or an **error**).\n:::\n\nThe tidyverse is a meta-package. When you load it you get eight packages loaded for you:\n\n-   **ggplot2**: for data visualization\n-   **dplyr**: for data wrangling\n-   **tidyr**: for data tidying and rectangling\n-   **readr**: for reading and writing data\n-   **tibble**: for modern, tidy data frames\n-   **stringr**: for string manipulation\n-   **forcats**: for dealing with factors\n-   **purrr**: for iteration with functional programming\n\nThe message that's printed when you load the package tells you which versions of these packages are loaded as well as any conflicts they may have introduced, e.g., the `filter()` function from dplyr has now masked (overwritten) the `filter()` function available in base R (and that's ok, we'll use `dplyr::filter()` anyway).\n\nYou can now **Render** your template document and see the results.\n\n# Data\n\nThe data frame we will be working with today is called `datasaurus_dozen` and it's in the datasauRus package. Actually, this single data frame contains 13 datasets, designed to show us why data visualization is important and how summary statistics alone can be misleading. The different datasets are marked by the `dataset` variable.\n\n::: callout-note\nIf it's confusing that the data frame is called `datasaurus_dozen` when it contains 13 datasets, you're not alone! Have you heard of a [baker's dozen](https://www.mentalfloss.com/article/32259/why-bakers-dozen-13)?\n:::\n\nLet's also load these packages in the **Console**. You can do this by either typing the following in the console or clicking on the play button (green triangle) on the code chunk that loads the packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readr' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'purrr' was built under R version 4.2.2\n```\n:::\n\n```{.r .cell-code}\nlibrary(datasauRus)\n```\n:::\n\n\nTo find out more about the dataset, type the following in your console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?datasaurus_dozen\n```\n:::\n\n\nA question mark before the name of an object will always bring up its help file. This command must be run in the console. Alternatively, you can use the `help()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(datasaurus_dozen)\n```\n:::\n\n\n# Exercises\n\n1.  Based on the help file, how many rows and how many columns does the `datasaurus_dozen` file have? What are the variables included in the data frame? Add your responses to your lab report.\n\n::: render-commit-push\nWhen you're done, commit your changes with the commit message \"Added answer for Ex 1\",\n\nThen, **push** these changes.\n:::\n\nLet's take a look at what these datasets are. To do so we can check th e `distinct()` values of the `dataset` variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatasaurus_dozen |>\n  distinct(dataset)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 13 × 1\n   dataset   \n   <chr>     \n 1 dino      \n 2 away      \n 3 h_lines   \n 4 v_lines   \n 5 x_shape   \n 6 star      \n 7 high_lines\n 8 dots      \n 9 circle    \n10 bullseye  \n11 slant_up  \n12 slant_down\n13 wide_lines\n```\n:::\n:::\n\n\nThe original Datasaurus (`dino`) was created by Alberto Cairo in [this great blog post](http://www.thefunctionalart.com/2016/08/download-datasaurus-never-trust-summary.html). The other Dozen were generated using simulated annealing and the process is described in the paper *Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics* through Simulated Annealing by Justin Matejka and George Fitzmaurice.[^1] In the paper, the authors simulate a variety of datasets that the same summary statistics to the Datasaurus but have very different distributions.\n\n[^1]: Matejka, Justin, and George Fitzmaurice. \"Same stats, different graphs: Generating datasets with varied appearance and identical statistics through simulated annealing.\" Proceedings of the 2017 CHI Conference on Human Factors in Computing Systems. ACM, 2017.\n\n## Data visualization and summary\n\n2.  Plot `y` vs. `x` for the `dino` dataset. Then, calculate the correlation coefficient between `x` and `y` for this dataset.\n\nBelow is the code you will need to complete this exercise. Basically, the answer is already given, but you need to include relevant bits in your document and successfully render it and view the results.\n\nStart with the `datasaurus_dozen` and **pipe** it into the `filter` function to filter for observations where `dataset == \"dino\"`. Store the resulting filtered data frame as a new data frame called `dino_data`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndino_data <- datasaurus_dozen |>\n  filter(dataset == \"dino\")\n```\n:::\n\n\nThere is a lot going on here, so let's slow down and unpack it a bit.\n\nFirst, the pipe operator: `|>`, takes what comes before it and sends it as the first argument to what comes after it. So here, we're saying `filter` the `datasaurus_dozen` data frame for observations where `dataset == \"dino\"`.\n\nSecond, the assignment operator: `<-`, assigns the name `dino_data` to the filtered data frame.\n\nNext, we need to visualize these data. We will use the `ggplot` function for this. Its first argument is the data you're visualizing. Next we define the `aes`thetic mappings. In other words, the columns of the data that get mapped to certain aesthetic features of the plot, e.g. the `x` axis will represent the variable called `x` and the `y` axis will represent the variable called `y`. Then, we add another layer to this plot where we define which `geom`etric shapes we want to use to represent each observation in the data. In this case we want these to be points, hence `geom_point`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = dino_data, mapping = aes(x = x, y = y)) +\n  geom_point()\n```\n:::\n\n\nFor the second part of this exercise, we need to calculate a summary statistic: the correlation coefficient. Correlation coefficient, often referred to as $r$ in statistics, measures the linear association between two variables. You will see that some of the pairs of variables we plot do not have a linear relationship between them. This is exactly why we want to visualize first: visualize to assess the form of the relationship, and calculate $r$ only if relevant. In this case, calculating a correlation coefficient really doesn't make sense since the relationship between `x` and `y` is definitely not linear (it's dinosaurial)!\n\nFor illustrative purposes only, let's calculate the correlation coefficient between `x` and `y`.\n\n::: callout-note\nStart with \\`dino_data\\` and calculate a summary statistic that we will call \\`r\\` as the \\`cor\\`relation between \\`x\\` and \\`y\\`.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndino_data |>\n  summarize(r = cor(x, y))\n```\n:::\n\n\n::: render-commit-push\nThis is a good place to pause, **render**, and **commit** changes with the commit message \"Added answer for Ex 2.\"\n\nThen, **push** these changes when you're done.\n:::\n\n3.  Plot `y` vs. `x` for the `circle` dataset. You can (and should) reuse code we introduced above, just replace the dataset name with the desired dataset. Then, calculate the correlation coefficient between `x` and `y` for this dataset. How does this value compare to the `r` of `dino`?\n\n::: render-commit-push\nThis is another good place to pause, **render**, and **commit** changes with the commit message \"Added answer for Ex 3.\"\n\nThen, **push** these changes when you're done.\n:::\n\n4.  Plot `y` vs. `x` for the `star` dataset. You can (and should) reuse code we introduced above, just replace the dataset name with the desired dataset. Then, calculate the correlation coefficient between `x` and `y` for this dataset. How does this value compare to the `r` of `dino`?\n\n::: render-commit-push\nYou should pause again, **render**, **commit** changes with the commit message \"Added answer for Ex 4\".\n\nThen, **push**.\n:::\n\nFinally, let's plot all datasets at once. In order to do this we will make use of faceting, given by the code below:\n\n::: callout-note\nFacet by the dataset variable, placing the plots in a 3 column grid, and don't add a legend.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(datasaurus_dozen, aes(x = x, y = y, color = dataset))+\n  geom_point()+\n  facet_wrap(~ dataset, ncol = 3) +\n  theme(legend.position = \"none\")\n```\n:::\n\n\nAnd we can use the `group_by` function to generate all the summary correlation coefficients. We'll go through these functions next week when we learn about data wrangling.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatasaurus_dozen |>\n  group_by(dataset) |>\n  summarize(r = cor(x, y)) \n```\n:::\n\n\n5.  Include the faceted plot and the summary of the correlation coefficients in your lab write-up by including relevant code in R chunks (and give them appropriate labels). In the narrative below the code chunks, *briefly* comment on what you notice about the plots and the correlations between `x` and `y` values within each of them (one or two sentences is fine!).\n\nYou're done with the data analysis exercises, but we'd like to do one more thing to customize the look of the report.\n\n## Resize your figures\n\nWe can customize the output from a particular R chunk by including options in the header that will override any global settings.\n\n6.  In the R chunks you wrote for Exercises 2-5, customize the settings by modifying the **options** in the R chunks used to create those figures.\n\nFor Exercises 2, 3, and 4, we want square figures. We can use `fig.height` and `fig.width` in the options to adjust the height and width of figures. Modify the chunks in Exercises 2-4 to be as follows:\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: ex2-chunk-label\n#| fig-height: 5\n#| fig-width: 5\n\n# Your code that created the figure\n```\n````\n:::\n\n\nFor Exercise 5, modify your figure to have `fig-height` of 10 and `fig-width` of 6.\n\nNow, save and render.\n\nOnce you've created this PDF file, you're done!\n\n::: render-commit-push\nCommit all remaining changes with the commit message \"Done with Lab 1!\".\n\nThen push.\n:::\n\n# Submission\n\n**This lab is not graded** but you should still submit it to Gradescope to practice marking pages and receive feedback on workflow/formatting. Remember, you must also be sure to commit and push all of your changes (nothing should be left in the Git pane) to your repo.\n\n# How to submit to gradescope\n\nOnce you are finished with the lab, you will submit your final PDF document to Gradescope.\n\n::: callout-warning\nBefore you wrap up the assignment, make sure all documents are updated on your GitHub repo. We will be checking these to make sure you have been practicing how to commit and push changes.\n\nYou must turn in a PDF file to the Gradescope page by the submission deadline to be considered \"on time\".\n:::\n\nTo submit your assignment:\n\n-   Go to <http://www.gradescope.com> and click *Log in* in the top right corner.\n-   Click *School Credentials* $\\rightarrow$ *Duke NetID* and log in using your NetID credentials.\n-   Click on your *STA 199* course.\n-   Click on the assignment, and you'll be prompted to submit it.\n-   Mark all the pages associated with each exercise. All the pages of your lab should be associated with at least one question (i.e., should be \"checked\").\n-   Do not select any pages of your .pdf submission to be associated with the *\"Workflow & formatting\"* question.\n\n# Grading\n\n::: callout-note\nThe \"Workflow & formatting\" grade is to assess the reproducible workflow. This includes:\n\n-   linking all pages appropriately on Gradescope\n-   putting your name in the YAML at the top of the document\n-   committing your most recent version to GitHub\n-   naming code chunks\n-   Are you under the 80 character code limit? (You shouldn't have to scroll to see all your code). Pipes `%>%`, `|>` and ggplot layers `+` should be followed by a new line\n:::\n",
    "supporting": [
      "lab-0_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}