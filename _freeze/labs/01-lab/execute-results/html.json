{
  "hash": "5d964c0069067e35cbdd15537953b2d9",
  "result": {
    "markdown": "---\ntitle: \"Lab 01 - Hello R!\"\ndate: \"Due: Add due date\"\ncategories: \"Lab\"\nformat:\n  html:\n    theme: labs.scss\n---\n\n\nThis lab will go through much of the same workflow we've demonstrated in class.\nThe main goal is to reinforce our demo of R and RStudio, which we will be using throughout the course both to learn the statistical concepts discussed in the course and to analyze real data and come to informed conclusions.\n\n::: callout-note\nR is the name of the programming language itself and RStudio is a convenient interface.\n:::\n\nAn additional goal is to reinforce Git and GitHub, the collaboration and version control system that we will be using throughout the course.\n\n::: callout-note\nGit is a version control system (like \"Track Changes\" features from Microsoft Word but more powerful) and GitHub is the home for your Git-based projects on the internet (like DropBox but much better).\n:::\n\nAs the labs progress, you are encouraged to explore beyond what the labs dictate; a willingness to experiment will make you a much better programmer.\nBefore we get to that stage, however, you need to build some basic fluency in R.\nToday we begin with the fundamental building blocks of R and RStudio: the interface, reading in data, and basic commands.\n\nTo make versioning simpler, this and the next lab are solo labs.\nIn the future, you'll learn about collaborating on GitHub and producing a single lab report for your lab team, but for now, concentrate on getting the basics down.\n\n**Your lab TA will lead you through the Getting Started, Packages, and Warm up sections.**\n\n# Getting started\n\n## Clone the repo & start new RStudio project\n\n-   Go to the course organization on GitHub (http://www.github.com/sta199-f22-2). Click on the repo with the prefix **lab-01-hello-r-**. It contains the starter documents you need to complete the lab.\n\n![](images/01/clone-repo.png){fig-align=\"center\" width=\"500\"}\n\n-   Click on the green **Clone or download** button, select **Use HTTPS** (this might already be selected by default, and if it is, you'll see the text **Clone with HTTPS** as in the image below).\n    Click on the clipboard icon to copy the repo URL.\n\n-   Go to <https://cmgr.oit.duke.edu/containers> and login with your Duke NetID and Password.\n\n-   Click to log into the container labelled `STA198-199`.\n    You should now see the RStudio environment.\n\n::: callout-warning\nIf you haven't yet done so, you'll first need to reserve this container, then log into it.\n:::\n\n-   Go to *File* ➡️ *New Project* ➡️ *Version Control* ➡️ *Git*.\n\n![](images/01/paste-url.png){fig-align=\"center\" width=\"500\"}\n\n-   Copy and paste the URL of your assignment repo into the dialog box *Repository URL*. You can leave *Project Directory Name* empty.\n    Click tab, and it will default to the name of the GitHub repo.\n\n-   Click *Create Project*, and the files from your GitHub repo will be displayed the *Files* pane in RStudio.\n\n## Configure Git\n\nThere is one more piece of housekeeping we need to take care of before we get started.\nSpecifically, we need to configure your Git so that RStudio can communicate with GitHub.\nThis requires two pieces of information: your name and email address.\n\nTo do so, you will use the `use_git_config()` function from the [**usethis**](https://usethis.r-lib.org/) package.\n\nType the following lines of code in the **console** in RStudio filling in your name and email address.\n\n::: callout-important\nThe email address is the one tied to your GitHub account.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(usethis)\nuse_git_config(user.name = \"GitHub username\", user.email = \"your email\")\n```\n:::\n\n\nFor example, mine would be as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(usethis)\nuse_git_config(user.name = \"ElijahMeyer3\", user.email = \"ADD EMAIL\")\n```\n:::\n\n\nIf you get the error message\n\n\n::: {.cell}\n\n```{.r .cell-code}\nError in library(usethis) : there is no package called ‘usethis’\n```\n:::\n\n\nthen you need to install the `usethis` package.\nRun the following code in the console to install the package.\nThen, rerun the `use_git_config()` function with your GitHub username and email address associated with your GitHub account.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"usethis\")\n```\n:::\n\n\nOnce you run the configuration code, your values for `user.name` and `user.email` will display in the console.\nIf your `user.name` and `user.email` are correct, you're good to go!\nOtherwise, run the code again with the necessary changes.\n\n## RStudio & Quarto\n\nBelow is the default layout of the RStudio IDE (short for RStudio integrated development environment -- it's \"integrated\" since you can see your code and your output in one place).\n\n**TO DO: UPDATE TO SCREENSHOT WITH QUARTO DOCUMENT!**\n\n![](images/01/rstudio-panes.png){fig-align=\"center\" width=\"1000\"}\n\nBelow are the general components of a Quarto file.\n\n**TO DO: UPDATE TO ANNOTATED QUARTO SCREENSHOT!**\n\n![](images/01/quarto.png){fig-align=\"center\" width=\"800\"}\n\n# Warm up\n\nBefore we introduce the data, let's warm up with some simple exercises.\nWe're going to go through our first **commit** and **push**.\n\n## YAML\n\nThe top portion of your Quarto file (between the three dashed lines) is called [YAML](https://yaml.org/).\nIt stands for \"YAML Ain't Markup Language\".\nIt is a human friendly data serialization standard for all programming languages.\nAll you need to know is that this area is called the YAML (we will refer to it as such) and that it contains meta information about your document.\n\nOpen the Quarto (qmd) file in your project, change the author name to your name, and render the document.\n\n## Commiting changes\n\nNow, go to the Git pane in your RStudio instance.\nThis will be in the top right hand corner in a separate tab.\n\nIf you have made changes to your qmd file, you should see it listed here.\nClick on it to select it in this list and then click on **Diff**.\nThis shows you the *diff*erence between the last committed state of the document and its current state that includes your changes.\nYou should see deletions in red and additions in green.\nAs well, you can see exactly which lines were changed.\n\nIf you're happy with these changes, we'll prepare the changes to be pushed to your remote repository.\nFirst, **stage** your changes by checking the appropriate box on the files you want to prepare.\nNext, write a meaningful commit message (for instance, \"Updated author name\") in the **Commit message** box.\nFinally, click **Commit**.\nNote that every commit needs to have a commit message associated with it.\n\n**TO DO: Add screenshot at this step!**\n\nOf course, you don't have to commit after every change, as this would get quite cumbersome.\nYou should consider committing states that are *meaningful to you* for inspection, comparison, or restoration.\nIn the first few assignments we will tell you exactly when to commit and in some cases, what commit message to use.\nAs the semester progresses we will let you make these decisions.\n\n## Pushing changes\n\nNow that you have made an update and committed this change, it's time to push these changes to the web!\nOr more specifically, to your repo on GitHub so that others can see your changes.\nBy others, we mean the course teaching team (your repos) in this course are private to you and us, only).\n\nIn order to push your changes to GitHub, you must have **staged** your **commit** to be pushed.\nclick on **Push**.\nThis will prompt a dialogue box where you first need to enter your user name, and then your password.\nDon't worry, we will soon teach you how to save your password so you don't have to enter it every time, but for now assignment you'll have to manually enter each time you push in order to gain some experience with the process.\n\n# Packages\n\nIn this lab we will work with two packages:\n\n-   **datasauRus** which contains the dataset, and\n-   **tidyverse** which is a collection of packages for doing data analysis in a \"tidy\" way.\n\nIf you want, you can **Render** your template document and see the results.\n\nNote, if you need to install the packages, you can install the tidyverse and datasauRus packages in the **console** (watch out for capitalization), but if you're using the container we've prepared for you, the packages should already be installed and only need to be loaded (remember that the console and the Quarto environments are separate!).\nLet's load these packages now by running the following in the Console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.1\n✔ readr   2.1.2     ✔ forcats 0.5.2\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(datasauRus)\n```\n:::\n\n\n::: callout-note\nThis will print out some message about which packages the tidyverse packages is loading along with it.\nIt's just R being informative, a **message** does not indicate anything is wrong (it's not a **warning** or an **error**).\n:::\n\n# Data\n\nThe data frame we will be working with today is called `datasaurus_dozen` and it's in the datasauRus package.\nActually, this single data frame contains 13 datasets, designed to show us why data visualization is important and how summary statistics alone can be misleading.\nThe different datasets are marked by the `dataset` variable.\n\n::: callout-note\nIf it's confusing that the data frame is called `datasaurus_dozen` when it contains 13 datasets, you're not alone!\nHave you heard of a [baker's dozen](https://www.mentalfloss.com/article/32259/why-bakers-dozen-13)?\n:::\n\nTo find out more about the dataset, type the following in your **console**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?datasaurus_dozen\n```\n:::\n\n\nA question mark before the name of an object will always bring up its help file.\nThis command must be run in the **console**; alternatively, you can use\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(datasaurus_dozen)\n```\n:::\n\n\n1.  Based on the help file, how many rows and how many columns does the `datasaurus_dozen` file have? What are the variables included in the data frame? Add your responses to your lab report. When you're done, commit your changes with the commit message \"Added answer for Ex 1\", and push.\n\n**TO DO: Something is wrong with the output width below.**\n\nLet's take a look at what these datasets are.\nTo do so we can make a frequency table of the dataset variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatasaurus_dozen |>\n  count(dataset) |>\n  print(13)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble:\n#   13 × 2\n   dataset   \n   <chr>     \n 1 away      \n 2 bullseye  \n 3 circle    \n 4 dino      \n 5 dots      \n 6 h_lines   \n 7 high_lines\n 8 slant_down\n 9 slant_up  \n10 star      \n11 v_lines   \n12 wide_lines\n13 x_shape   \n# … with 1\n#   more\n#   variable:\n#   n <int>\n```\n:::\n:::\n\n\nThe original Datasaurus (`dino`) was created by Alberto Cairo in [this great blog post](http://www.thefunctionalart.com/2016/08/download-datasaurus-never-trust-summary.html).\nThe other Dozen were generated using simulated annealing and the process is described in the paper *Same Stats, Different Graphs: Generating Datasets with Varied Appearance and Identical Statistics* through Simulated Annealing by Justin Matejka and George Fitzmaurice.[^1]\nIn the paper, the authors simulate a variety of datasets that the same summary statistics to the Datasaurus but have very different distributions.\n\n[^1]: Matejka, Justin, and George Fitzmaurice.\n    \"Same stats, different graphs: Generating datasets with varied appearance and identical statistics through simulated annealing.\" Proceedings of the 2017 CHI Conference on Human Factors in Computing Systems.\n    ACM, 2017.\n\n# Data visualization and summary\n\n2.  Plot `y` vs. `x` for the `dino` dataset. Then, calculate the correlation coefficient between `x` and `y` for this dataset.\n\nBelow is the code you will need to complete this exercise.\nBasically, the answer is already given, but you need to include relevant bits in your Rmd document and successfully render it and view the results.\n\nStart with the `datasaurus_dozen` and **pipe** it into the `filter` function to filter for observations where `dataset == \"dino\"`.\nStore the resulting filtered data frame as a new data frame called `dino_data`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndino_data <- datasaurus_dozen |>\n  filter(dataset == \"dino\")\n```\n:::\n\n\nThere is a lot going on here, so let's slow down and unpack it a bit.\n\nFirst, the pipe operator: `|>`, takes what comes before it and sends it as the first argument to what comes after it.\nSo here, we're saying `filter` the `datasaurus_dozen` data frame for observations where `dataset == \"dino\"`.\n\nSecond, the assignment operator: `<-`, assigns the name `dino_data` to the filtered data frame.\n\nNext, we need to visualize these data.\nWe will use the `ggplot` function for this.\nIts first argument is the data you're visualizing.\nNext we define the `aes`thetic mappings.\nIn other words, the columns of the data that get mapped to certain aesthetic features of the plot, e.g. the `x` axis will represent the variable called `x` and the `y` axis will represent the variable called `y`.\nThen, we add another layer to this plot where we define which `geom`etric shapes we want to use to represent each observation in the data.\nIn this case we want these to be points, hence `geom_point`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = dino_data, mapping = aes(x = x, y = y)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](01-lab_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nFor the second part of this exercise, we need to calculate a summary statistic: the correlation coefficient.\nCorrelation coefficient, often referred to as $r$ in statistics, measures the linear association between two variables.\nYou will see that some of the pairs of variables we plot do not have a linear relationship between them.\nThis is exactly why we want to visualize first: visualize to assess the form of the relationship, and calculate $r$ only if relevant.\nIn this case, calculating a correlation coefficient really doesn't make sense since the relationship between `x` and `y` is definitely not linear (it's dinosaurial)!\n\nFor illustrative purposes only, let's calculate the correlation coefficient between `x` and `y`.\n\n::: callout-note\nStart with \\`dino_data\\` and calculate a summary statistic that we will call \\`r\\` as the \\`cor\\`relation between \\`x\\` and \\`y\\`.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndino_data |>\n  summarize(r = cor(x, y))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n        r\n    <dbl>\n1 -0.0645\n```\n:::\n:::\n\n\n::: render-commit-push\nThis is a good place to pause, **render**, and **commit** changes with the commit message \"Added answer for Ex 2.\" Then, **push** these changes when you're done.\n:::\n\n3.  Plot `y` vs. `x` for the `star` dataset. You can (and should) reuse code we introduced above, just replace the dataset name with the desired dataset. Then, calculate the correlation coefficient between `x` and `y` for this dataset. How does this value compare to the `r` of `dino`?\n\n::: render-commit-push\nThis is another good place to pause, **render**, and **commit** changes with the commit message \"Added answer for Ex 3.\" Then, **push** these changes when you're done.\n:::\n\n4.  Plot `y` vs. `x` for the `circle` dataset. You can (and should) reuse code we introduced above, just replace the dataset name with the desired dataset. Then, calculate the correlation coefficient between `x` and `y` for this dataset. How does this value compare to the `r` of `dino`?\n\n::: render-commit-push\nYou should pause again, **render**, **commit** changes with the commit message \"Added answer for Ex 4\", and **push**.\n:::\n\nFinally, let's plot all datasets at once.\nIn order to do this we will make use of faceting, given by the code below:\n\n::: callout-note\nFacet by the dataset variable, placing the plots in a 3 column grid, and don't add a legend.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(datasaurus_dozen, aes(x = x, y = y, color = dataset))+\n  geom_point()+\n  facet_wrap(~ dataset, ncol = 3) +\n  theme(legend.position = \"none\")\n```\n:::\n\n\nAnd we can use the `group_by` function to generate all the summary correlation coefficients.\nWe'll go through these functions next week when we learn about data wrangling.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatasaurus_dozen |>\n  group_by(dataset) |>\n  summarize(r = cor(x, y)) \n```\n:::\n\n\n5.  Include the faceted plot and the summary of the correlation coefficients in your lab write-up by including relevant code in R chunks (give them appropriate names). In the narrative below the code chunks, *briefly* comment on what you notice about the plots and the correlations between `x` and `y` values within each of them (one or two sentences is fine!).\n\nYou're done with the data analysis exercises, but we'd like to do one more thing to customize the look of the report.\n\n## Resize your figures\n\nWe can customize the output from a particular R chunk by including options in the header that will override any global settings.\n\n6.  In the R chunks you wrote for Exercises 2-5, customize the settings by modifying the **options** in the R chunks used to create those figures.\n\nFor Exercises 2, 3, and 4, we want square figures.\nWe can use `fig.height` and `fig.width` in the options to adjust the height and width of figures.\nModify the chunks in Exercises 2-4 to be as follows:\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: ex2-chunk-label\n#| fig-height: 5\n#| fig-width: 5\n\n# Your code that created the figure\n```\n````\n:::\n\n\nFor Exercise 5, modify your figure to have `fig-height` of 10 and `fig-width` of 6.\n\nNow, save and render.\n\nOnce you've created this PDF file, you're done!\n\n::: render-commit-push\nCommit all remaining changes, use the commit message \"Done with Lab 1!\" and push.\n:::\n\n# Submission\n\nIn this class, we'll be submitting PDF documents to Gradescope.\n\n::: callout-warning\nBefore you wrap up the assignment, make sure all documents are updated on your GitHub repo.\nWe will be checking these to make sure you have been practicing how to commit and push changes.\n\nRemember -- you must turn in a PDF file to the Gradescope page before the submission deadline for full credit.\n:::\n\nTo submit your assignment:\n\n-   Go to [http://www.gradescope.com](http://www.gradescope.com/) and click *Log in* in the top right corner.\n-   Click *School Credentials* ➡️ *Duke NetID* and log in using your NetID credentials.\n-   Click on your *STA 199* course.\n-   Click on the assignment, and you'll be prompted to submit it.\n-   Mark the pages associated with each exercise. All of the pages of your lab should be associated with at least one question (i.e., should be \"checked\").\n-   Select the first page of your PDF submission to be associated with the *\"Workflow & formatting\"* section.\n",
    "supporting": [
      "01-lab_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}