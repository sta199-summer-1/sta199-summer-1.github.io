{
  "hash": "94a7b3c5d1fedba27094f505b8e1dd0b",
  "result": {
    "markdown": "---\ntitle: \"Lab 5 - Logistic regression\"\ncategories: \"Lab\"\nexecute:\n  eval: true\neditor: \n  markdown: \n    wrap: 80\n---\n\n\n::: callout-important\nThis lab is due Thursday, June 15th at 11:59pm.\n:::\n\n# Closing an Issue\n\nGo to your GitHub repository. You should see an issue with the title \"Learn to\nclose an issue with a commit\". Your goal is to close this issue with a commit to\npractice this workflow, which is the workflow you will use when you are\naddressing feedback on your projects.\n\n-   Go to Exercise 1 Part a in your lab .qmd file.\n-   Delete the sentence that says \"Delete this text!!!\".\n-   Render the document.\n-   Commit your changes from the git tab with the commit message \"Delete\n    sentence, closes #1.\"\n-   Push your changes to your repo and observe that the issue is now closed and\n    the commit associated with this move is linked from the issue.\n\nGitHub allows you to close an issue directly with commits if the commit uses one\nof the following keywords followed by the issue number (which you can find next\nto the issue title): close, closes, closed, fix, fixes, fixed, resolve,\nresolves, and resolved.\n\n# Lab\n\n## Packages\n\nYou'll need the following packages for today's lab.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(dsbox)\n```\n:::\n\n\n## Data\n\nThe data can be found in the **dsbox** package, and it's called `gss16`. Since\nthe dataset is distributed with the package, we don't need to load it\nseparately; it becomes available to us when we load the package.\n\nIf you would like to explicitly load the data into your environment so you can\nview it, you can do so by running this code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss16 <- gss16\n```\n:::\n\n\nYou can find out more about the dataset by inspecting its documentation, which\nyou can access by running `?gss16` in the Console or using the Help menu in\nRStudio to search for `gss16`. You can also find this information\n[here](https://rstudio-education.github.io/dsbox/reference/gss16.html).\n\n# Exercises\n\n## Exercise 1 - Data wrangling\n\n::: callout-important\nRemember: For each exercise, you should choose one person to type. All others\nshould contribute to the discussion, but only one person should type up the\nanswer, render the document, commit, and push to GitHub. All others should\n**not** touch the document.\n:::\n\na)  Create a new data frame called `gss16_advfront` that includes the variables\n    `advfront`, `educ`, `polviews`, and `wrkstat`. Then, use the `drop_na()`\n    function to remove rows that contain `NA`s from this new data frame. Sample\n    code is provided below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss16_advfront <- gss16 |>\n  select(___, ___, ___, ___) |>\n  drop_na()\n```\n:::\n\n\nb)  Re-level the `advfront` variable such that it has two levels:\n    `\"Strongly agree\"` and `\"Agree\"` combined into a new level called `\"Agree\"`\n    and the remaining levels combined into `\"Not agree\"`. Then, re-order the\n    levels in the following order: `\"Agree\"` and `\"Not agree\"`. Finally,\n    `count()` how many times each new level appears in the `advfront` variable.\n\nHint: You can do this in various ways, but you'll likely need to use `mutate`\nalong with either `if_else()` or `case_when()` to re-level the variable and then\n`fct_relevel()` to re-order the levels. (See Lab 2 for an example of using\n`if_else` and HW 1 Exercise 4 for an example of using `fct_relevel`.)\n\nc)  Combine the levels of the `polviews` variable such that levels that have the\n    word \"liberal\" in them are lumped into a level called `\"Liberal\"` and those\n    that have the word \"conservative\" in them are lumped into a level called\n    `\"Conservative\"`. Then, re-order the levels in the following order:\n    `\"Conservative\"` , `\"Moderate\"`, and `\"Liberal\"`. Finally, `count()` how\n    many times each new level appears in the `polviews` variable.\n\n::: callout-important\nAfter the team member working on Exercise 1 renders, commits, and pushes, all\nother team members should pull. Then, choose a new team member to write the\nanswer to Exercise 2. (And so on for the remaining exercises.)\n:::\n\n## Exercise 2 - Train and test sets\n\nNow, let's split the data into training and test sets so that we can evaluate\nthe models we're going to fit by how well they predict outcomes on data that\nwasn't used to fit the models.\n\nSpecify a random seed of 1234 (i.e., include `set.seed(1234)` at the beginning\nof your code chunk), and then split `gss16_advfront` randomly into a training\nset `train_data` and a test set `test_data`. Do this so that the training set\ncontains 80% of the rows of the original data.\n\n## Exercise 3 - Logistic Regression\n\na)  Using the training data, specify a logistic regression model that predicts\n    `advfront` by `educ`. In particular, the model should predict the\n    probability that `advfront` has value `\"Not agree\"`. Name this model\n    `model1`. Report the tidy output below.\n\nb)  Write out the estimated model in proper notation. State the meaning of any\n    variables in the context of the data.\n\nc)  Using your estimated model, predict the probability of agreeing with the\n    following statement: Even if it brings no immediate benefits, scientific\n    research that advances the frontiers of knowledge is necessary and should be\n    supported by the federal government (`Agree` in advfront) if you have an\n    education of 7 years.\n\n## Exercise 4 - Another model\n\na)  Again using the training data, fit a new model that adds the additional\n    explanatory variable of `polviews`. Name this model `model2`. Report the\n    tidy output below.\n\nb)  Now, predict the probability of agreeing with the following statement: Even\n    if it brings no immediate benefits, scientific research that advances the\n    frontiers of knowledge is necessary and should be supported by the federal\n    government (`Agree` in advfront) if you have an education of 7 years and are\n    Conservative.\n\n## Exercise 5 - Evaluating models with AIC\n\na)  Report the AIC values for each of `model1` and `model2`.\n\nb)  Based on your results in part a, does it appear that including political\n    views in addition to years of education is useful for modeling whether\n    employees agree with the statement \"Even if it brings no immediate benefits,\n    scientific research that advances the frontiers of knowledge is necessary\n    and should be supported by the federal government\"? Explain.\n\n## Exercise 6 - Evaluating models using test data\n\na)  For each of `model1` and `model2`, plot an ROC curve to visualize the true\n    positive rate (sensitivity) and false positive rate (1 - specificity) for\n    predictions on the observations in `test_data`. Add a title to each graph\n    indicating which model they represent.\n\n    You can use the code below to make the plot for model 1. Then adapt it as\n    needed for model 2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel1_pred <- predict(model1, test_data, type = \"prob\") |>  \n  bind_cols(test_data |> select(advfront))\n\nmodel1_pred |>\n  roc_curve(\n    truth = advfront, # advfront contains the true labels\n    `.pred_Not agree`, # we're predicting the probability of \"Not agree\"\n    event_level = \"second\" # \"Not agree\" is the 2nd level of advfront\n  ) |>\n  autoplot() +\n  labs(title = \"ROC curve for model 1\")\n```\n:::\n\n\nb)  Report the area under the curve (AUC) for each of the ROC curves from part\n    a.  \nc)  Are the AUC values consistent with your conclusion in Exercise 5b? Explain.\n\n# Submission\n\n::: callout-warning\nBefore you wrap up the assignment, make sure all documents are updated on your\nGitHub repo. We will be checking these to make sure you have been practicing how\nto render and push changes.\n\nYou must turn in a PDF file to the Gradescope page by the submission deadline to\nbe considered \"on time\". Only one team member should submit to Gradescope, but\nthey should add all other team members to the submission.\n\nMake sure your data are tidy! That is, your code should not be running off the\npages and spaced properly. See: <https://style.tidyverse.org/ggplot2.html>.\n:::\n\nTo submit your assignment:\n\n-   Go to <http://www.gradescope.com> and click *Log in* in the top right\n    corner.\n-   Click *School Credentials* $\\rightarrow$ *Duke NetID* and log in using your\n    NetID credentials.\n-   Click on your *STA 199* course.\n-   Click on the assignment, and you'll be prompted to submit it.\n-   Mark all the pages associated with exercise. All the pages of your lab\n    should be associated with at least one question (i.e., should be \"checked\").\n    *If you do not do this, you will be subject to lose points on the\n    assignment.*\n-   Do not select any pages of your .pdf submission to be associated with the\n    *\"Workflow & formatting\"* question.\n\n# Grading\n\n| Component             | Points |\n|:----------------------|:-------|\n| Ex 1                  | 10     |\n| Ex 2                  | 10     |\n| Ex 3                  | 5      |\n| Ex 4                  | 10     |\n| Ex 5                  | 5      |\n| Ex 6                  | 5      |\n| Workflow & formatting | 5      |\n| **Total**             | 50     |\n\n::: callout-note\nThe \"Workflow & formatting\" grade is to assess the reproducible workflow. This\nincludes:\n\n-   linking all pages appropriately on Gradescope\n\n-   putting your team and member names in the YAML at the top of the document\n\n-   committing the submitted version of your `.qmd` to GitHub\n\n-   Are you under the 80 character code limit? (You shouldn't have to scroll to\n    see all your code). Pipes `%>%`, `|>` and ggplot layers `+` should be\n    followed by a new line\n\n-   You should be consistent with stylistic choices, e.g. only use 1 of `=` vs\n    `<-` and `%>%` vs `|>`\n\n-   All binary operators should be surrounded by space. For example `x + y` is\n    appropriate. `x+y` is not.\n:::\n",
    "supporting": [
      "lab-5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}