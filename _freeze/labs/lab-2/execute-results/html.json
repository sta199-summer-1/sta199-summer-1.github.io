{
  "hash": "2904c787ed0f0dfb0e4f3f280cd45752",
  "result": {
    "markdown": "---\ntitle: \"Lab 2 - Group Formation Data wrangling\"\ncategories: \"Lab\"\nexecute:\n  eval: true\n---\n\n\n::: callout-important\nThis lab is due Monday May 29th at 11:59pm.\n:::\n\n# Learning goals\n\nIn this lab, you will...\n\n-   form teams for future labs + project\n-   use data wrangling to extract meaning from data\n-   continue developing a workflow for reproducible data analysis\n-   continue working with data visualization tools\n\n# Getting started\n\n-   Go to the [sta199-summer-1](https://github.com/sta199-summer-1) organization on GitHub. Click on the repo with the prefix `lab-02`. It contains the starter documents you need to complete the lab.\n-   Clone the repo and start a new project in RStudio. See the [Lab 0 instructions](https://sta199-summer-1.github.io/labs/lab-0.html#clone-the-repo-start-new-rstudio-project) for details on cloning a repo and starting a new R project.\n-   First, open the Quarto document `lab-02.qmd` and Render it.\n-   Make sure it compiles without errors.\n\n## Group Formation \n\nAfter lab-2, lab assignments will be group based, and we will shortly be starting the group project. \n\nIn this lab, you are going **choose who you want to work with**. Groups are to be made up of 3-4 students per group. If you would like to be assigned to a group, please reach out to the TA.\n\n## Why Teams: Rationale\n\nIn the real world, data scientists and statisticians often work in research teams. It is a skill to be able to communicate and work together on common projects. Thus, the remaining labs + your project will be team based.\n\nTeams work is better when members have a common understanding of the team's goals and expectations for collaboration. The purpose of this activity is to help your team making a plan for working together during lab and outside of the scheduled lab time.\n\nEach team member will have some ideas about how a team should operate. These ideas may be very different. This is your opportunity to share your thoughts and ideas to promote optimal team function and prevent misunderstandings in the future.\n\n## Team Name\n\nDiscuss with your group a team name to be called. Your GitHub repos will be created for this team name moving forward. Report your team name to your Lab Leader before moving on.\n\n## Instructions\n\n**There are two items you need to complete when forming your group.**\n\n-- Report your group members and team name to your TA to be recorded \n\n-- Fill out the team agreement\n\nTeam agreement: Discuss each of the items below with all in-person team members. If necessary, also follow up this week with any missing team members.\n\nHave *one person* act as the recorder and type the team's decisions in the `team-agreement.qmd` file.\n\n*Be sure the team agrees on an item before it is added to the document.*\n\nOnce the document is complete, the recorder should render, commit, and push the team agreement to GitHub. All team members can refer to this document throughout the semester.\n\nThis is not graded for accuracy, and simply acts as a tool to facilitate good group work. \n\n## Team Agreement\n\n### Weekly meetings\n\nIdentify a 1 - 2 hour weekly block outside of lab where the team can meet to work on assignments. All team members should block off this time on their calendar in case the group needs to meet to finish lab or work on the project.\n\n### Meeting \"location\"\n\nHow the team will meet to work together (e.g. in-person, Zoom, Facetime, Google Hangouts). Be sure every member is able to access the virtual meeting space, if needed. If you are unable to find a weekly time when the team can meet, briefly outline a plan to work on assignments outside of lab. Otherwise, you can delete this item.\n\n### Primary method of communication\n\nThe team's primary method of communication outside of meetings (e.g. Slack, text messages, etc.)\n\n### How should someone notify the other members if they are unable to attend lab or a scheduled team meeting?\n\n### By when should everyone have their portion of the lab completed?\n\nKeep in mind your team may want to have time to review the lab before turning it in to make sure it is a cohesive write up.\n\n### Any other items the team would like to discuss or plan.\n\n### Missing Teammates\n\nIf someone is missing in your lab, and you would like them to be a part of your team, please communicate this information with both them and the TA so this can be documented. \n\n# Data Wrangling\n\n## Warm up\n\nBefore we introduce the data, let's warm up with some simple exercises.\n\n-   Update the YAML, changing the author name to your name, and **render** the document.\n-   Commit your changes with a meaningful commit message.\n-   Push your changes to GitHub.\n-   Go to your repo on GitHub and confirm that your changes are visible in your \\``.qmd` **and** .`pdf` files. If anything is missing, render, commit, and push again.\n\n## Packages\n\nWe'll use the **tidyverse** package for much of the data wrangling.\nThis package is already installed for you.\nYou can load it by running the following in your Console:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## Data\n\nThe dataset for this assignment can be found as a CSV (comma separated values) file in the `data` folder of your repository.\nYou can read it in using the following.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnobel <- read_csv(\"data/nobel.csv\")\n```\n:::\n\n\nThe descriptions of the variables are as follows:\n\n1.  `id`: ID number\n2.  `firstname`: First name of laureate\n3.  `surname`: Surname\n4.  `year`: Year prize won\n5.  `category`: Category of prize\n6.  `affiliation`: Affiliation of laureate\n7.  `city`: City of laureate in prize year\n8.  `country`: Country of laureate in prize year\n9.  `born_date`: Birth date of laureate\n10. `died_date`: Death date of laureate\n11. `gender`: Gender of laureate\n12. `born_city`: City where laureate was born\n13. `born_country`: Country where laureate was born\n14. `born_country_code`: Code of country where laureate was born\n15. `died_city`: City where laureate died\n16. `died_country`: Country where laureate died\n17. `died_country_code`: Code of country where laureate died\n18. `overall_motivation`: Overall motivation for recognition\n19. `share`: Number of other winners award is shared with\n20. `motivation`: Motivation for recognition\n\nIn a few cases the name of the city/country changed after laureate was given (e.g. in 1975 Bosnia and Herzegovina was called the Socialist Federative Republic of Yugoslavia).\nIn these cases the variables below reflect a different name than their counterparts without the suffix `_original`.\n\n21. `born_country_original`: Original country where laureate was born\n22. `born_city_original`: Original city where laureate was born\n23. `died_country_original`: Original country where laureate died\n24. `died_city_original`: Original city where laureate died\n25. `city_original`: Original city where laureate lived at the time of winning the award\n26. `country_original`: Original country where laureate lived at the time of winning the award\n\n## Get to know your data\n\n1.  How many observations and how many variables are in the dataset? Use inline code to answer this question. What does each row represent?\n\nThere are some observations in this dataset that we will exclude from our analysis to match the Buzzfeed results.\n\n2.  Create a new data frame called `nobel_living` that filters for\n\n-   laureates for whom `country` is available\n-   laureates who are people as opposed to organizations (organizations are denoted with `\"org\"` as their `gender`)\n-   laureates who are still alive (their `died_date` is `NA`)\n\n\n::: {.cell}\n\n:::\n\n\nConfirm that once you have filtered for these characteristics you are left with a data frame with 228 observations, once again using inline code.\n\n## Most living Nobel laureates were based in the US when they won their prizes\n\n... says the Buzzfeed article.\nLet's see if that's true.\n\nFirst, we'll create a new variable to identify whether the laureate was in the US when they won their prize.\nWe'll use the `mutate()` function for this.\nThe following pipeline mutates the `nobel_living` data frame by adding a new variable called `country_us`.\nWe use an if statement to create this variable.\nThe first argument in the `if_else()` function we're using to write this if statement is the condition we're testing for.\nIf `country` is equal to `\"USA\"`, we set `country_us` to `\"USA\"`.\nIf not, we set the `country_us` to `\"Other\"`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnobel_living <- nobel_living |>\n  mutate(\n    country_us = if_else(country == \"USA\", \"USA\", \"Other\")\n  )\n```\n:::\n\n\nNext, we will limit our analysis to only the following categories: Physics, Medicine, Chemistry, and Economics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnobel_living_science <- nobel_living |>\n  filter(category %in% c(\"Physics\", \"Medicine\", \"Chemistry\", \"Economics\"))\n```\n:::\n\n\nFor the following exercises, work with the `nobel_living_science` data frame you created above.\nThis means you'll need to define this data frame in your Quarto document, even though the next exercise doesn't explicitly ask you to do so.\n\n3.  Create a faceted bar plot visualizing the relationship between the category of prize and whether the laureate was in the US when they won the nobel prize.\n    Interpret your visualization, and say a few words about whether the Buzzfeed headline is supported by the data.\n\n    -   Your visualization should be faceted by category.\n    -   For each facet you should have two bars, one for winners in the US and one for Other.\n    -   Flip the coordinates so the bars are horizontal, not vertical.\n\n::: render-commit-push\nNow is a good time to render, commit, and push.\nMake sure that you commit and push all changed documents and your Git pane is completely empty before proceeding.\n\n<br>\n:::\n\n## But of those US-based Nobel laureates, many were born in other countries\n\n4.  Create a new variable called `born_country_us` in `nobel_living_science` that has the value `\"USA\"` if the laureate is born in the US, and `\"Other\"` otherwise. How many of the winners are born in the US?\n\n::: callout-note\nYou should be able to ~~cheat~~ borrow from code you used earlier to create the `country_us` variable.\n:::\n\n5.  Add a second variable to your visualization from Exercise 3 based on whether the laureate was born in the US or not.\n    Create two visualizations with this new variable added:\n\n    -   Plot 1: Segmented frequency bar plot\n\n    -   Plot 2: Segmented relative frequency bar plot (*Hint:* Add `position = \"fill\"` to `geom_bar()`.)\n\n    Here are some instructions that apply to both of these visualizations:\n\n    -   Your final visualization should contain a facet for each category.\n    -   Within each facet, there should be two bars for whether the laureate won the award in the US or not.\n    -   Each bar should have segments for whether the laureate was born in the US or not.\n\n    Which of these visualizations is a better fit for answering the following question: \"Do the data appear to support Buzzfeed's claim that of those US-based Nobel laureates, most were born in other countries?\" First, state which plot you're using to answer the question.\n    Then, answer the question, explaining your reasoning in 1-2 sentences.\n\n::: render-commit-push\nNow is a good time to render, commit, and push.\nMake sure that you commit and push all changed documents and your Git pane is completely empty before proceeding.\n\n<br>\n:::\n\n6.  In a single pipeline, filter the `nobel_living_science` data frame for laureates who won their prize in the US, but were born outside of the US, and then create a frequency table (with the `count()` function) for their birth country (`born_country`) and arrange the resulting data frame in descending order of number of observations for each country. Which country is the most common?\n\n::: render-commit-push\nNow is a good time to render, commit, and push.\nMake sure that you commit and push all changed documents and your Git pane is completely empty before proceeding.\n\n<br>\n:::\n\n# Submission\n\nOnce you are finished with the lab, you will your final PDF document to Gradescope.\n\n::: callout-warning\nBefore you wrap up the assignment, make sure all documents are updated on your GitHub repo.\nWe will be checking these to make sure you have been practicing how to commit and push changes.\n\nYou must turn in a PDF file to the Gradescope page by the submission deadline to be considered \"on time\".\n\nMake sure your data are tidy!\nThat is, your code should not be running off the pages and spaced properly.\nSee: <https://style.tidyverse.org/ggplot2.html>.\n:::\n\nTo submit your assignment:\n\n-   Go to <http://www.gradescope.com> and click *Log in* in the top right corner.\n-   Click *School Credentials* $\\rightarrow$ *Duke NetID* and log in using your NetID credentials.\n-   Click on your *STA 199* course.\n-   Click on the assignment, and you'll be prompted to submit it.\n-   Mark all the pages associated with exercise. All the pages of your lab should be associated with at least one question (i.e., should be \"checked\"). *If you do not do this, you will be subject to lose points on the assignment.*\n-   Do not select any pages of your .pdf submission to be associated with the *\"Workflow & formatting\"* question.\n\n# Grading\n\n| Component             | Points |\n|:----------------------|:-------|\n| Ex 1                  | 6      |\n| Ex 2                  | 7      |\n| Ex 3                  | 8      |\n| Ex 4                  | 6      |\n| Ex 5                  | 10     |\n| Ex 6                  | 8      |\n| Workflow & formatting | 5      |\n| **Total**             | **50** |\n\n::: callout-note\nThe \"Workflow & formatting\" grade is to assess the reproducible workflow.\nThis includes:\n\n-   linking all pages appropriately on Gradescope\n-   putting your name in the YAML at the top of the document\n-   committing the submitted version of your `.qmd` to GitHub\n-   Are you under the 80 character code limit? (You shouldn't have to scroll to see all your code). Pipes `%>%`, `|>` and ggplot layers `+` should be followed by a new line\n-   You should be consistent with stylistic choices, e.g. only use 1 of `=` vs `<-` and `%>%` vs `|>`\n-   All binary operators should be surrounded by space. For example `x + y` is appropriate. `x+y` is not.\n:::\n",
    "supporting": [
      "lab-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}