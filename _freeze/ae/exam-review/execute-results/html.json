{
  "hash": "899d70a9267487e689bd31e0eac2bb1c",
  "result": {
    "markdown": "---\ntitle: \"Exam Review\"\ncategories: \n  - Application exercise\n  - Answers\neditor: visual\n---\n\n\n## Packages\n\nWe will use the following two packages in this application exercise.\n\n-   **tidyverse**: For data import, wrangling, and visualization.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nFor the remaining time, we will practice data wrangling with dplyr. We will be using the Student Exams data set. This is fictional data. The dataset is not from a real context, and the data set does not represent real people. The purpose of this data set is to teach data science and practice using R functions.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudentexams <- read_csv(\"data/StudentsPerformance.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 1000 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): gender, race/ethnicity, parental level of education, lunch, test pr...\ndbl (3): math score, reading score, writing score\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nFirst, let's take a `glimpse` at our data. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(studentexams)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,000\nColumns: 8\n$ gender                        <chr> \"female\", \"female\", \"female\", \"male\", \"m…\n$ `race/ethnicity`              <chr> \"group B\", \"group C\", \"group B\", \"group …\n$ `parental level of education` <chr> \"bachelor's degree\", \"some college\", \"ma…\n$ lunch                         <chr> \"standard\", \"standard\", \"standard\", \"fre…\n$ `test preparation course`     <chr> \"none\", \"completed\", \"none\", \"none\", \"no…\n$ `math score`                  <dbl> 72, 69, 90, 47, 76, 71, 88, 40, 64, 38, …\n$ `reading score`               <dbl> 72, 90, 95, 57, 78, 83, 95, 43, 64, 60, …\n$ `writing score`               <dbl> 74, 88, 93, 44, 75, 78, 92, 39, 67, 50, …\n```\n:::\n:::\n\n\nIdentify the variable names. Identify their type. \n\n**Inline code example** There are 1000 number of rows in the data set and 8 columns in the data set. \n\nSome variable names have spaces. This won't work. Let's clean these up using `rename`. \n\n`rename()` changes the name of columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudentexams <- rename(studentexams, math_score = `math score`,\n                                     reading_score = `reading score`, \n                                     writing_score = `writing score`,\n                                  parental_level_of_education = `parental level of education`)\n```\n:::\n\n\n\n`filter()` :chooses rows based on column values.\n\nFilter these data so that it only contains rows where math scores are at or equal to 70. \n\nThen, filter the data to only look at student performance if they received standard lunch.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudentexams |>\n  filter(math_score >= 70)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 409 × 8\n   gender `race/ethnicity` parental_leve…¹ lunch test …² math_…³ readi…⁴ writi…⁵\n   <chr>  <chr>            <chr>           <chr> <chr>     <dbl>   <dbl>   <dbl>\n 1 female group B          bachelor's deg… stan… none         72      72      74\n 2 female group B          master's degree stan… none         90      95      93\n 3 male   group C          some college    stan… none         76      78      75\n 4 female group B          associate's de… stan… none         71      83      78\n 5 female group B          some college    stan… comple…      88      95      92\n 6 male   group A          some college    stan… comple…      78      72      70\n 7 male   group C          high school     stan… none         88      89      86\n 8 male   group D          bachelor's deg… free… comple…      74      71      80\n 9 male   group A          master's degree free… none         73      74      72\n10 male   group C          high school     stan… none         70      70      65\n# … with 399 more rows, and abbreviated variable names\n#   ¹​parental_level_of_education, ²​`test preparation course`, ³​math_score,\n#   ⁴​reading_score, ⁵​writing_score\n```\n:::\n\n```{.r .cell-code}\nstudentexams |> \n  filter(lunch == \"standard\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 645 × 8\n   gender `race/ethnicity` parental_leve…¹ lunch test …² math_…³ readi…⁴ writi…⁵\n   <chr>  <chr>            <chr>           <chr> <chr>     <dbl>   <dbl>   <dbl>\n 1 female group B          bachelor's deg… stan… none         72      72      74\n 2 female group C          some college    stan… comple…      69      90      88\n 3 female group B          master's degree stan… none         90      95      93\n 4 male   group C          some college    stan… none         76      78      75\n 5 female group B          associate's de… stan… none         71      83      78\n 6 female group B          some college    stan… comple…      88      95      92\n 7 male   group C          associate's de… stan… none         58      54      52\n 8 male   group D          associate's de… stan… none         40      52      43\n 9 female group B          high school     stan… none         65      81      73\n10 male   group A          some college    stan… comple…      78      72      70\n# … with 635 more rows, and abbreviated variable names\n#   ¹​parental_level_of_education, ²​`test preparation course`, ³​math_score,\n#   ⁴​reading_score, ⁵​writing_score\n```\n:::\n:::\n\n\nWhy does == work here but not in the homework? Check Sakai for a more detailed explanation!\n\n`mutate()` changes the values of columns and creates new columns. Let's use this with if else to create a new variable. Create a new variable called math_pass. Have it display yes if the student received a 70 or higher on their math exam. If they did not, have it say no.\n\nHint: Think of if else as: \n\nIf this /\nThen this / \nElse this /\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudentexams |> \n  mutate(\n    math_pass = if_else(math_score >= 70, \"Yes\", \"No\")\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,000 × 9\n   gender `race/ethnicity` paren…¹ lunch test …² math_…³ readi…⁴ writi…⁵ math_…⁶\n   <chr>  <chr>            <chr>   <chr> <chr>     <dbl>   <dbl>   <dbl> <chr>  \n 1 female group B          bachel… stan… none         72      72      74 Yes    \n 2 female group C          some c… stan… comple…      69      90      88 No     \n 3 female group B          master… stan… none         90      95      93 Yes    \n 4 male   group A          associ… free… none         47      57      44 No     \n 5 male   group C          some c… stan… none         76      78      75 Yes    \n 6 female group B          associ… stan… none         71      83      78 Yes    \n 7 female group B          some c… stan… comple…      88      95      92 Yes    \n 8 male   group B          some c… free… none         40      43      39 No     \n 9 male   group D          high s… free… comple…      64      64      67 No     \n10 female group B          high s… free… none         38      60      50 No     \n# … with 990 more rows, and abbreviated variable names\n#   ¹​parental_level_of_education, ²​`test preparation course`, ³​math_score,\n#   ⁴​reading_score, ⁵​writing_score, ⁶​math_pass\n```\n:::\n:::\n\n\n\nNow, use mutate to make gender a factor. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudentexams|>\n  mutate(gender = as.factor(gender))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,000 × 8\n   gender `race/ethnicity` parental_leve…¹ lunch test …² math_…³ readi…⁴ writi…⁵\n   <fct>  <chr>            <chr>           <chr> <chr>     <dbl>   <dbl>   <dbl>\n 1 female group B          bachelor's deg… stan… none         72      72      74\n 2 female group C          some college    stan… comple…      69      90      88\n 3 female group B          master's degree stan… none         90      95      93\n 4 male   group A          associate's de… free… none         47      57      44\n 5 male   group C          some college    stan… none         76      78      75\n 6 female group B          associate's de… stan… none         71      83      78\n 7 female group B          some college    stan… comple…      88      95      92\n 8 male   group B          some college    free… none         40      43      39\n 9 male   group D          high school     free… comple…      64      64      67\n10 female group B          high school     free… none         38      60      50\n# … with 990 more rows, and abbreviated variable names\n#   ¹​parental_level_of_education, ²​`test preparation course`, ³​math_score,\n#   ⁴​reading_score, ⁵​writing_score\n```\n:::\n:::\n\n\n\n`select()` changes whether or not a column is included.\n\n`slice()` chooses rows based on location.\n\nNow, only display the first 5 rows of the three exam score columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudentexams |>\n  select(math_score, reading_score, writing_score) |>\n  slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n  math_score reading_score writing_score\n       <dbl>         <dbl>         <dbl>\n1         72            72            74\n2         69            90            88\n3         90            95            93\n4         47            57            44\n5         76            78            75\n```\n:::\n:::\n\n\n\nNote: You can combine with functions like head and tail to look at data too!\n\n\n`group_by()` perform calculations separately for each value of a variable\n\n`summarise()` collapses a group into a single row\n\nNow, group students by their parental level of education and calculate their mean math score. Arrange this in descending order. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudentexams |>\n  group_by(parental_level_of_education) |>\n  summarise(mean_math = mean(math_score)) |>\n  arrange(desc(mean_math))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  parental_level_of_education mean_math\n  <chr>                           <dbl>\n1 master's degree                  69.7\n2 bachelor's degree                69.4\n3 associate's degree               67.9\n4 some college                     67.1\n5 some high school                 63.5\n6 high school                      62.1\n```\n:::\n:::\n\n\n## Your turn! \n\nAsk a question about these data and answer it. Create appropriate plots to help answer your question. \n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "exam-review_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}