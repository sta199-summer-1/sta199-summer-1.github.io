{
  "hash": "5af7b05723b25338a0e00ee42040ad52",
  "result": {
    "markdown": "---\ntitle: \"Logistic Regression\"\nformat: html\neditor: visual\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(ggridges)\nlibrary(patchwork)\n```\n:::\n\n\n# Learning goals\n\nBy the end of today, you will...\n\n-   use logistic regression to fit a model for a binary response variable\n-   fit a logistic regression model in R\n-   use a logistic regression model for classification\n\nTo illustrate logistic regression, we will build a spam filter from email data. Today's data represent incoming emails in David Diez's (one of the authors of OpenIntro textbooks) Gmail account for the first three months of 2012 . All personally identifiable information has been removed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemail <- read_csv(\"data/email.csv\") |>\n  mutate(spam = factor(spam))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 3890 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (2): winner, number\ndbl  (18): spam, to_multiple, from, cc, sent_email, image, attach, dollar, i...\ndttm  (1): time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(email)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 3,890\nColumns: 21\n$ spam         <fct> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ to_multiple  <dbl> 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ from         <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ cc           <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 2, 1, 0, 2, 0, …\n$ sent_email   <dbl> 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, …\n$ time         <dttm> 2012-01-01 06:16:41, 2012-01-01 07:03:59, 2012-01-01 16:…\n$ image        <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ attach       <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ dollar       <dbl> 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 0, …\n$ winner       <chr> \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no…\n$ inherit      <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ viagra       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ password     <dbl> 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, …\n$ num_char     <dbl> 11.370, 10.504, 7.773, 13.256, 1.231, 1.091, 4.837, 7.421…\n$ line_breaks  <dbl> 202, 202, 192, 255, 29, 25, 193, 237, 69, 68, 25, 79, 191…\n$ format       <dbl> 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, …\n$ re_subj      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, …\n$ exclaim_subj <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, …\n$ urgent_subj  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ exclaim_mess <dbl> 0, 1, 6, 48, 1, 1, 1, 18, 1, 0, 2, 1, 0, 10, 4, 10, 20, 0…\n$ number       <chr> \"big\", \"small\", \"small\", \"small\", \"none\", \"none\", \"big\", …\n```\n:::\n:::\n\n\nThe variables we'll use in this analysis are\n\n-   `spam`: 1 if the email is spam, 0 otherwise\n-   `exclaim_mess`: The number of exclamation points in the email message\n\n**We want to use the number of exclamation points in an email to predict whether or not it is spam.**\n\n## Exploratory Data Analysis\n\nLet's start by taking a look at our data. Create an density plot to investigate the relationship between `spam` and `exclaim_mess`. Additionally, calculate the mean number of exclamation points for both spam and non-spam emails.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemail |>\n  ggplot(\n    aes(x = exclaim_mess, fill = spam)\n  ) + \n  geom_density()\n```\n\n::: {.cell-output-display}\n![](ae-18-A_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\nemail |>\n  group_by(spam) |>\n  summarize(exmean = mean(exclaim_mess))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  spam  exmean\n  <fct>  <dbl>\n1 0       4.04\n2 1       1.27\n```\n:::\n:::\n\n\n## Let's try a linear model\n\nSuppose we try using a linear model to describe the relationship between the number of exclamation points and whether an email is spam. Write up a linear model that models spam by exclamation marks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspam_model_l <- linear_reg() |>\n  set_engine(\"lm\") |>\n  fit(spam ~ exclaim_mess, data = email)\n  \n  \n  \n  tidy(spam_model_l)\n```\n:::\n\n\nThis doesn't work! The response variable should be numeric and not a factor if we are trying to fit a line.\n\nA visualization of a linear model is below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = email) + \n  geom_jitter(aes(x = exclaim_mess, y = spam, color = spam), alpha = 0.5) + \n  geom_smooth(aes(x = exclaim_mess, y = as.numeric(spam)), method = \"lm\", se = FALSE, color = \"black\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](ae-18-A_files/figure-html/linear-model-1.png){width=672}\n:::\n:::\n\n\n-   Discuss your visualization with your neighbor. Is the linear model a good fit for the data? Why or why not?\n\n*How do you build a model to fit a binary response variable (a categorical response variable with 2 outcomes)?*\n\n# Logistic regression\n\n**Logistic regression** takes in a number of explanatory variables and outputs the log-odds of \"success\" (an outcome of 1) in a binary response variable. The log-odds are then used to predict the probability of \"success\".\n\nLet's see what the logistic regression model looks like for our example:\n\nLet $p$ be the probability an email is spam.\n\n-   $\\frac{p}{1-p}$: odds an email is spam (if p = 0.7, then the odds are 0.7/(1 - 0.7) = 2.33)\n-   $\\log\\Big(\\frac{p}{1-p}\\Big)$: \"log-odds\", i.e., the natural log, an email is spam\n\nThen, the logistic regression model using the number of exclamation points as an explanatory variable is\n\n\n$$\\log\\Big(\\frac{p}{1-p}\\Big) = \\beta_0 + \\beta_1 \\times exclaim\\_mess$$\n\n\nThe probability an email is spam is\n\n\n$$p = \\frac{\\exp\\{\\beta_0 + \\beta_1 \\times exclaim\\_mess\\}}{1 + \\exp\\{\\beta_0 + \\beta_1 \\times exclaim\\_mess\\}}$$\n\n\n## Exercise 1\n\n-   Let's fit the logistic regression model using the number of exclamation points to predict the probability an email is spam.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspam_model <- logistic_reg() |>\n  set_engine(\"glm\") |>\n  fit(spam ~ exclaim_mess , data = email, family = \"binomial\")\n  \n  \n  tidy(spam_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 5\n  term         estimate std.error statistic   p.value\n  <chr>           <dbl>     <dbl>     <dbl>     <dbl>\n1 (Intercept)    -1.91     0.0640    -29.8  9.82e-196\n2 exclaim_mess   -0.168    0.0240     -7.02 2.21e- 12\n```\n:::\n:::\n\n\n-   How does the code above differ from previous code we've used to fit regression models?\n\n-   Now, compare your summary output to the estimated model below.\n\n\n$$\\log\\Big(\\frac{p}{1-p}\\Big) = -1.9114 - 0.1684 \\times exclaim\\_mess$$\n\n\n## Exercise 2\n\nWhat is the probability the email is spam if it contains 10 exclamation points?\n\nUse R as a calculator to calculate the predicted probability\n\n\n::: {.cell}\n\n```{.r .cell-code}\n-1.91 - 0.168*10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -3.59\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nexp(-3.59) / (1+ exp(-3.59))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.02685712\n```\n:::\n:::\n\n\nWe can use the predict function in R to produce the probability as well.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_email <- tibble(exclaim_mess = 10)\npredict(spam_model$fit, new_email) # log-odds\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        1 \n-3.594985 \n```\n:::\n\n```{.r .cell-code}\npredict(spam_model$fit, new_email, type = \"response\") # probability\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         1 \n0.02672713 \n```\n:::\n:::\n\n\n## Exercise 3\n\nWe have the probability an email is spam, but ultimately we want to use the probability to classify an email as spam or not spam. Therefore, we need to set a **decision-making threshold**, such that an email is classified as spam if the predicted probability is greater than the threshold and not spam otherwise.\n\nSuppose you are a data scientist working on a spam filter. You must determine how high the predicted probability must be before you think it would be reasonable to call it spam and put it in the junk folder (which the user is unlikely to check).\n\nWhat are some tradeoffs you would consider as you set the decision-making threshold? Discuss with your neighbor.\n\n**Class: I would consider the impact of recieving a spam email vs missing a potential important email.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemail <- email |>\n  mutate(pred_prob = predict(spam_model$fit, type = \"response\"))\nggplot(data = email) + \n  geom_point(aes(x = exclaim_mess, y = as.numeric(spam) -1, \n                        color = spam)) + \n  geom_line(aes(x = exclaim_mess, y = pred_prob)) + \n  labs(x = \"Number of exclamation points\", \n       y = \"Predicted probability an email is spam\", \n       color = \"Is email spam?\"\n       )\n```\n\n::: {.cell-output-display}\n![](ae-18-A_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\nspecie <- c(rep(\"sorgho\" , 3) , rep(\"poacee\" , 3) , rep(\"banana\" , 3) , rep(\"triticum\" , 3) )\ncondition <- rep(c(\"normal\" , \"stress\" , \"Nitrogen\") , 4)\nvalue <- abs(rnorm(12 , 0 , 15))\ndata <- data.frame(specie,condition,value)\n```\n:::\n",
    "supporting": [
      "ae-18-A_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}