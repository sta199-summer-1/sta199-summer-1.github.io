{
  "hash": "11cf5a397a74f62517896e5b257d76ab",
  "result": {
    "markdown": "---\ntitle: \"AE 08: Data import\"\nsubtitle: \"Suggested answers\"\ncategories: \n  - Application exercise\n  - Answers\neditor: visual\n---\n\n\n## Packages\n\nWe will use the following two packages in this application exercise.\n\n-   **tidyverse**: For data import, wrangling, and visualization.\n-   **readxl:** For importing data from Excel.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readxl)\n```\n:::\n\n\n## Nobel winners\n\n-   **Demo:** Load the data from the `data` folder and assign it to `nobel`. Confirm that this new object appears in your Environment tab.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    nobel <- read_csv(\"data/nobel.csv\")\n    ```\n    \n    ::: {.cell-output .cell-output-stderr}\n    ```\n    Rows: 935 Columns: 26\n    ── Column specification ────────────────────────────────────────────────────────\n    Delimiter: \",\"\n    chr  (21): firstname, surname, category, affiliation, city, country, gender,...\n    dbl   (3): id, year, share\n    date  (2): born_date, died_date\n    \n    ℹ Use `spec()` to retrieve the full column specification for this data.\n    ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n    ```\n    :::\n    :::\n\n\n<!-- -->\n\n-   **Your turn (4 minutes):** Split the data into two -- nobel laureates in STEM fields (`category` should be Physics, Medicine, Chemistry, or Economics) and nobel laureates in non-STEM fields. Name these two new objects appropriately. *Remember:* Use concise and evocative names. Confirm that these new objects appear in your Environment tab and that the sum of the number of observations in the two new data frames add to the number of observations in the original data frame.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # define stem fields\n    stem_fields <- c(\"Physics\", \"Medicine\", \"Chemistry\", \"Economics\")\n    \n    # stem laureates\n    nobel_stem <- nobel %>%\n      filter(category %in% stem_fields)\n    \n    # non-steam laureates\n    nobel_nonstem <- nobel %>%\n      filter(!(category %in% stem_fields))\n    ```\n    :::\n\n\n-   **Demo:** Write out the two new datasets you created into the `data` folder:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    write_csv(nobel_stem, file = \"data/nobel-stem.csv\")\n    write_csv(nobel_nonstem, file = \"data/nobel-nonstem.csv\")\n    ```\n    :::\n\n\n## Sales\n\nSales data are stored in an Excel file that looks like the following:\n\n![](images/salex-excel.png){fig-align=\"center\" width=\"801\"}\n\n-   **Demo:** Read in the Excel file called `sales.xlsx` from the `data/` folder such that it looks like the following.\n\n    ![](images/sales-1.png){width=\"300\"}\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    sales <- read_excel(\n      \"data/sales.xlsx\", \n      skip = 3,\n      col_names = c(\"id\", \"n\")\n      )\n    ```\n    :::\n\n\n-   **Demo - Stretch goal:** Manipulate the sales data such such that it looks like the following.\n\n    ![](images/sales-2.png){width=\"300\"}\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    sales2 <- sales |>\n      mutate(\n        is_brand_name = str_detect(id, \"Brand\"),\n        brand = if_else(is_brand_name, id, NULL)\n      ) |>\n      fill(brand) |>\n      filter(!is_brand_name) |>\n      select(brand, id, n)\n    ```\n    :::\n\n\n<!-- -->\n\n-   **Question:** Why should we bother with writing code for reading the data in by skipping columns and assigning variable names as well as cleaning it up in multiple steps instead of opening the Excel file and editing the data in there to prepare it for a clean import?\n\n    Because the code allows us to struggle once and re-use for future datasets and leaves a transparent trail of our modifications while manipulating the data in Excel directly is neither reproducible nor reusable.\n\n## Optional\n",
    "supporting": [
      "ae-08-data-import-A_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}