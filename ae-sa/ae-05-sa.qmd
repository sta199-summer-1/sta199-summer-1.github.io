---
title: "Joining Fisheries + Tidy Data"
subtitle: "Suggested Answers"
format: html
editor: visual
---

# Summary of last class

## Global aquaculture production

The Fisheries and Aquaculture Department of the Food and Agriculture Organization of the United Nations collects data on fisheries production of countries.

**Our goal is to create a visualization of the mean share of aquaculture by continent.**

![](images/aquaculture-production-by-continent.png){fig-align="center"}

-   **Your turn (2 minutes):**
    -   Which variable(s) will we use to join the `fisheries` and `continents` data frames?
    -   We want to keep all rows and columns from `fisheries` and add a column for corresponding continents. Which join function should we use?
-   **Demo:** Join the two data frames and name assign the joined data frame back to `fisheries`.

```{r}
#| label: packages

library(tidyverse)
library(scales)
```

```{r}
#| label: read-in-data 

fisheries <- read_csv("data/fisheries.csv")
continents <- read_csv("data/continents.csv")

```

```{r}
#| label: join-fisheries-continents

fisheries <- fisheries |>
  left_join(continents)

#same as the following

left_join(fisheries, continents)

```

# Start

-   **Demo:** Take a look at the updated `fisheries` data frame. There are some countries that were not in `continents`. First, identify which countries these are (they will have `NA` values for `continent`). Then, manually update the `continent` information for these countries using the `case_when` function. Finally, check that these updates have been made as intended and no countries are left without continent information.

Hint: Run `?is.na` in the Console

```{r}
#| label: data-clean

fisheries |>
  filter(is.na(continent))
```

## Break for if_else practice

Run `?if_else` if the Console.

Let's use the mock `y` data set to answer this question.

Let's make a new column called `ind`. In this column, if the input of `value` is larger than 3, make the input of the `ind` column say "yes". If not, make it say no.

```{r}

y <- tibble(
  value = c(1, 2, 4),
  ycol = c("y1", "y2", "y4")
  )

names(y)

new.data <- y |>
  mutate(ind = if_else(value > 3, "yes" , "no"))  



```

Below fixes the `NA` with the appropriate country. Run `?case_when` and comment through each line of code below.

```{r}
fisheries <- fisheries |> # data then
  mutate( # create or change variables
    continent = case_when(
    country == "Democratic Republic of the Congo" ~ "Africa",
    country == "Hong Kong" ~ "Asia",
    country == "Myanmar" ~ "Asia", 
    TRUE ~ continent
    )
  )

```

-   **Demo:** Add a new column to the `fisheries` data frame called `aq_prop`. We will calculate it as `aquaculture / total`. Save the resulting frame as `fisheries`.

```{r add-aq-prop}
#| label: add-aq-prop

fisheries <- fisheries |> 
  mutate(aq_prop = aquaculture / total )
  
```

-   **Your turn (5 minutes):** Now expand your calculations to also calculate the mean, minimum and maximum aquaculture proportion for continents in the fisheries data. Note that the functions for calculating minimum and maximum in R are `min()` and `max()` respectively.

```{r}
#| label: fisheries-summary-display

fisheries |> 
  group_by(continent) |>
  summarize(min_aq_prop = min(aq_prop),
            mean_aq_prop = mean(aq_prop),
            max_aq_prop = max(aq_prop))


```

-   **Demo:** Using your code above, create a new data frame called `fisheries_summary` that calculates minimum, mean, and maximum aquaculture proportion for each continent in the fisheries data.

```{r}
#| label: fisheries-summary-save

fisheries_summary <- fisheries |> 
  group_by(continent) |>
  summarize(min_aq_prop = min(aq_prop),
            mean_aq_prop = mean(aq_prop),
            max_aq_prop = max(aq_prop))
```

-   **Demo:** Then, determine which continent has the largest value of `max_ap`. Take the `fisheries_summary` data frame and order the results in descending order of max aquaculture proportion.

```{r}
#| label: fisheries-summary-sorted

fisheries_summary |>
  arrange(desc(max_aq_prop))

```

-   **Demo:** Recreate the following plot using the data frame you have developed so far.

![](images/aquaculture-production-by-continent.png){fig-align="center"}

Hint: https://ggplot2.tidyverse.org/reference/geom_bar.html

Hint: https://forcats.tidyverse.org/reference/fct_reorder.html

Hint: We can control labels using `scale_x_continious` or `scale_y_continous`. Within this function, we can change label specifications: https://scales.r-lib.org/reference/label_percent.html

```{r}
#| label: fisheries-summary-plot

fisheries_summary |>
  ggplot(
    aes(y = fct_reorder(continent , mean_aq_prop) , x = mean_aq_prop)
  ) +
  geom_col() +
  labs(title = "Average share of aquaculture by continent",
       subtitle = "out of total fisheries harvest, 2016",
       x = NULL, 
       y = NULL) + 
  scale_x_continuous(label = label_percent(accuracy = 1))
  


```

## Pivot Practice

Run the following code below. Are these data in long or wide format? Why?

```{r}
#| label: pivot-prac

x <- tibble(
  state = rep(c("MT", "NC" , "SC"),2),
  group = c(rep("C", 3), rep("D", 3)),
  obs = c(1:6)
  )

x

```

Pivot these data so that the data are wide. i.e. Each state should be it's own unique observation (row). Save this new data set as `y`.

```{r}
#| label: pivot

y <- x |> 
  pivot_wider(names_from = group, values_from = obs)

```

Now, let's change it back. Introducing `pivot_longer`. There are three things we need to consider with `pivot_longer`:

-   What the columns will be
-   `names_to`
-   `values_to`

Hint: !variable.name can be read as "not this variable" or "everything but this variable"

```{r}
#| label: pivot-2

y |>
  pivot_longer(cols = c(C,D), names_to = "group" , values_to = "obs")

```

## Pivot Practice 2

Let's try this on a real data set.

The Portland Trailblazers are a National Basketball Association (NBA) sports team. These data reflect the points scored by 9 Portland Trailblazers players across the first 10 games of the 2021-2022 NBA season.

```{r}
#| label: data-2
trailblazer <- read_csv("data/trailblazer21.csv")
```

-- Take a slice at the data. Are these data in wide or long format?

```{r}
#| label: slice-blazer

slice(trailblazer)

```

-- Pivot the data so that you have columns for `Player`, `Game`, `Points`. Save this as a new data set called `new.blazer`.

```{r}
#| label: pivot-3

new.blazer <- trailblazer |>
  pivot_longer(cols = !Player,
               names_to = "Game", 
               values_to = "Points")

```

-- Suppose now that you are asked to have two separate columns within these data. One column to represent `Game`, and one to represent `Location`. Make this happen below. Save your new data set as `new.blazer`

Hint: Run `?separate` in the Console.

```{r}
#| label: separate

trailblazer |> 
  pivot_longer(cols = !Player,
               names_to = "Game",
               values_to = "Points") |>
  separate(Game, sep = "_", into = c("Game" , "Location"))

```
