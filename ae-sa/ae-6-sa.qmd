---
title: "AE 06: Suggested Answers"
categories: 
  - Application exercise
editor: visual
---

## Debegguing

The questions are left unanswered so you can practice. The solutions are at the end of the document.

In this activity, we will go over how to identify and fix common coding errors. This demonstration will use the `mtcars` data set. In each of these code chunks, you will either need to add or alter code in order to get it running. Please take notes and treat this AE as a "common errors debugging sheet" to use in the future. There will only be one error per code chunk.

1.  First, let's make a quick exploratory plot to assess these data.

```{r}
#| label: plot-1
#| eval: false

mtcars |> 
  ggplot(
    aes(x = mpg, y = wt)
  ) + 
  geom_point()
```

**Error** -

**Fix** -

2.  

```{r}
#| label: plot-2
#| eval: false

mtcars |>
  ggplot(
    aes(x = mpg, y = gears)
  ) + 
  geom_point()
```

**Error** -

**Fix** -

```{r}
#| label: plot-3
#| eval: false

mtcars |>
  ggplot(
    aes(x = mpg, y = wt) + 
  geom_point()
  
```

**Error** -

**Fix** -

```{r}
#| label: plot-4
#| eval: false

mtcars |>
  ggplot(
    aes(x = mpg, y = gear)
  ) + 
  geom_bar()
```

**Error** -

**Fix** -

```{r}
#| label: plot-5
#| eval: false

mtcars |>
  filter(mpg > 17)

mtcars.new |>
  ggplot(
    aes(x = mpg, y = wt)
  ) + 
  geom_point()
  

```

**Error** -

**Fix** -

```{r}
#| label: plot-6
#| eval: false


mtcars 
  |>
  ggplot(
    aes(x = mpg, y = wt)
  ) + 
  geom_point()
  

```

**Error** -

**Fix** -

```{r}
#| label: plot-7
#| eval: false

p <- mtcars |>
  mutate(cyl = factor(cyl)) |>
  ggplot(
    aes(x = mpg, y = wt, color = cyl)
  ) + 
  geom_point() 
  
p + scale_color_viridis_c()


```

**Error** -

**Fix** -

```{r}
#| label: plot-8
#| eval: false

mtcars |>
  mutate(cyl = factor(cyl)) |>
  ggplot(
    aes(x = mpg, y = wt color = cyl)
  ) + 
  geom_point() 
  


```

**Error** -

**Fix** -

## HW-1 Demo

The following code has multiple errors. Let's fix the code to the point where we make the following graph:

![](images/recreate.png)

Strategies:

-   Don't diagnose all errors at once

-   Go line by line

Hint: There are four total errors in the code below.

```{r}
#| label: price-garage
#| message: false
#| warning: false
#| eval: false

library(openintro)
 
duke_forest |>
  mutate(garage = if_else(str_detect("Garage"), "Garage", "No garage")) |>
  ggplot(aes(x = "price", fill = garage)) +
  geom_histogram() +
  facet_wrap(garage, ncol = 1) +
  labs(
    x = Price in $,
    y = "",
    title = "Histogram of Price of Homes by Garage or not",
    fill = "Garage or not"
  )
```

## Answers

1.  Need to library tidyverse
2.  Variable spelled incorrectly
3.  Need to match up ()
4.  Does not take argument x and y
5.  Must define new data set
6.  Don't have pipe on own line
7.  \_c is for continous variable. We need \_d
8.  Missing ,
9.  str_detect is missing `parking` variable. Need to specify which variable to search in Do not need quotes on variable name Need quotes on x axis facet_wrap needs \~ before variable

## Pivoting StatSci Majors

## Packages

```{r}
#| label: packages
#| message: false
#| warning: false

library(tidyverse)
```

## Goal

Our ultimate goal in this application exercise is to make the following data visualization.

![](images/statsci-plot.png){fig-alt="Line plot of numbers of Statistical Science majors over the years (2011 - 2021). Degree types represented are BS, BS2, AB, AB2. There is an increasing trend in BS degrees and somewhat steady trend in AB degrees." fig-align="center"}

## Data

The data come from the [Office of the University Registrar](https://registrar.duke.edu/registration/enrollment-statistics). They make the data available as a table that you can download as a PDF, but I've put the data exported in a CSV file for you. Let's load that in.

The first column (variable) is the `degree`, and there are 4 possible degrees: BS (Bachelor of Science), BS2 (Bachelor of Science, 2nd major), AB (Bachelor of Arts), AB2 (Bachelor of Arts, 2nd major). The remaining columns show the number of students graduating with that major in a given academic year from 2011 to 2021.

-   **Your turn (3 minutes):** Take a close look at the plot and describe what it shows in 2-3 sentences.

**Add response**

## Data In

```{r}
#| label: load-statsci

statsci <- read_csv("data/statsci.csv")
```

And let's take a look at the data.

```{r}
#| label: glimpse-data

glimpse(statsci)

slice(statsci)

```

Write a sentence using inline code that shares the number or rows and columns in these data.

These data have `r nrow(statsci)` rows and `r ncol(statsci)` columns.

-   **Your turn (4 minutes):** Take a look at the plot we aim to make and sketch / think about the data frame we need to make the plot. Determine what each row and each column of the data frame should be. *Hint:* We need data to be in columns to map to `aes`thetic elements of the plot.

**Add response**

## Pivoting

-   **Demo:** Pivot the `statsci` data frame *longer* such that each row represents a degree type / year combination and `year` and `n`umber of graduates for that year are columns in the data frame.

Explain why the following code below accomplishes the question above.

```{r}
#| label: pivot-statsci

statsci |>
  pivot_longer(
    cols = !c(degree,id),
    names_to = "year",
    values_to = "n"
  ) 
```

-   **Question:** What is the type of the `year` variable? Why? What should it be?

It's a (categorical/quantitative) variable since the information came from the columns of the original data frame and R cannot know that these character strings represent years. The variable type should be (categorical/quantitative).

-   Demo: Start over with pivoting, and this time also make sure `year` is a numerical variable in the resulting data frame. How do we typically change data types? We can also do it within pivot. How does this code differ from above?

**Add response**

```{r}
#| label: year
statsci |>
  pivot_longer(
    cols = -c(degree,id),
    names_to = "year",
    names_transform = as.numeric,
    values_to = "n"
  )  

```

-   **Demo:** Add on to your pipeline that you started with pivoting and convert `NA`s in `n` to `0`s.

```{r}
#| label: mutate

statsci |>
  pivot_longer(
    cols = !c(id,degree),
    names_to = "year",
    names_transform = as.numeric,
    values_to = "n"
  ) |>
  mutate(n = if_else(is.na(n), 0, n))
```

Note: Once you have the correct code, change `eval: false` to `eval: true` OR delete the code altogether.

-   **Demo:** In our plot the degree types are BS, BS2, AB, and AB2. This information is in our dataset, in the `degree` column, but this column also has additional characters we don't need. Create a new column called `degree_type` with levels BS, BS2, AB, and AB2 (in this order) based on `degree`.

-- Use separate to separate the degree_type column -- Comment on what str_remove is doing -- Comment on what fct_relevel is doing

```{r}
#| label: separate


statsci |>
  pivot_longer(
    cols = !c(id,degree),
    names_to = "year",
    names_transform = as.numeric,
    values_to = "n"
  ) |>
  mutate(n = if_else(is.na(n), 0, n)) |>
  separate(degree, sep = "\\(" , into = c("major", "degree_type")) |>
  mutate(
    degree_type = str_remove(degree_type, "\\)"),
    degree_type = fct_relevel(degree_type, "BS", "BS2", "AB", "AB2")
    )
```

-   **Your turn (5 minutes):** Now we start making our plot, but let's not get too fancy right away. Create the following plot, which will serve as the "first draft" on the way to our [Goal]. Do this by adding on to your pipeline from earlier.

![](images/statsci-plot-draft.png){fig-alt="Line plot of numbers of Statistical Science majors over the years (2011 - 2021). Degree types represented are BS, BS2, AB, AB2. There is an increasing trend in BS degrees and somewhat steady trend in AB degrees." fig-align="center"}

```{r}
#| label: initial-plot
#| eval: false
statsci |>
  pivot_longer(
    cols = !c(id,degree),
    names_to = "year",
    names_transform = as.numeric,
    values_to = "n"
  ) |>
  mutate(n = if_else(is.na(n), 0, n)) |>
  separate(degree, sep = " \\(", into = c("major", "degree_type")) |>
  mutate(
    degree_type = str_remove(degree_type, "\\)"),
    degree_type = fct_relevel(degree_type, "BS", "BS2", "AB", "AB2")
    ) |> 
  ggplot(
    aes(x = year, y = n, color = degree_type)
  ) + 
  geom_point() + 
  geom_line()

```
