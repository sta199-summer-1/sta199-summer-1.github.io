---
title: "Suggested Answers: More Models"
format: html
editor: visual
---

## Packages

Note - if you don't have the plotly or widgetframe package, you can install these before running `library` by writing the following code in the console:

install.packages("plotly") install.packages("widgetframe")

These packages are not necessary to finish the AE.

```{r}
#| label: load-packages
#| message: false
#| warning: false
library(tidyverse)
library(tidymodels)
library(palmerpenguins)
library(plotly)
library(widgetframe)
```

## Interaciton Model

-- Fit the interaction model that models body mass by island and flipper length. Display the summary output.

```{r}
#| label: int-model

int_model <- linear_reg() |>
  set_engine("lm") |>
  fit(body_mass_g ~ flipper_length_mm * island, data = penguins)


```

-- Below, write out the estimate regression equation below.

$\widehat{body\_mass\_g} = -5464 + 48.5*flipper + 3551*Dream + 3218*Torgersen - 19.4*flipper*Dream - 17.4*flipper*Torgersen$

{1 if Dream; 0 else} {1 if Torgersen; 0 else}

-- Now, write out the estimated regression equation for each island. Show how the slopes by island.

Biscoe: $\widehat{body\_mass} = -5464 + 48.5*flipper}$

Dream: $\widehat{body\_mass} = (-5464 + 3551) + (48.5 - 19.7)*flipper$

Torgersen: $\widehat{body\_mass} = (-5464 + 3218) + (48.5 - 17.4)*flipper$

Now, name your interaction model `int_model` and remove the tidy() from the pipeline. Use this named model to make this prediction below.

-- Predict the body mass of a penguin with a flipper length of 200 on the Dream island

```{r}
#| label: int-pred

predict(int_model, data.frame(flipper_length_mm = 200, island = "Dream"))

```

How does the picture change if our two explanatory variables are quantitative?

In this example, let's explore body mass, and it's relationship to bill length and flipper length.

-- Brainstorm, how could we visualize this?

```{r}
#| label: 3d-plot
#| eval: false
quanplot <- plot_ly(penguins, 
                    x = ~ flipper_length_mm, y = ~ body_mass_g, z = ~bill_length_mm,
                    marker = list(size = 3, color = "lightgray" , alpha = 0.5, 
                                  line = list(color = "gray" , width = 2))) |>
                      add_markers() |>
                      plotly::layout(scene = list(
                        xaxis = list(title = "Flipper (mm)"),
                        yaxis = list(title = "Bill (mm)"), 
                        zaxis = list(title = "Body Mass (g)")
                      )) |>
                    config(displayModeBar = FALSE)
                  frameWidget(quanplot)
                      
```

-- Now, fit the additive model between flipper length, bill length, and body mass below.

```{r}
 
add_model <- linear_reg() |>
  set_engine("lm") |>
  fit(body_mass_g ~ flipper_length_mm + bill_length_mm, data = penguins) 

```

-- Interpret bill length in the context of the problem.

"Holding all other variables constant" "Estimate a mean change in Y" "For a one unit increase in X....."

Holding flipper length constant, for a one mm increase in bill length, we estimate a mean change in body mass of 6.05 grams.

-- Finally, fit the interaction model between flipper length, bill length, and body mass.

```{r}


int_model2 <- linear_reg() |>
  set_engine("lm") |>
  fit(body_mass_g ~ flipper_length_mm * bill_length_mm, data = penguins) 


```

body mass's relationship with flipper length depends on the penguins bill length

-- Lastly, calculate the R-squared (coefficient of determination) for each model fit today. Interpret the largest R-squared value in the context of the problem.

```{r}

glance(int_model)$r.squared #let's interpret this one
glance(add_model)$r.squared
glance(int_model2)$r.squared

```

Our interaction model with flipper length and island explains roughly 79% of the variation in body mass.

What really is R-squared? (See slides)

## Model Selection

How can we choose between the models that we fit? Which one is the best?

Adjusted r-squared and AIC are two common methods (see ae-14)

## Extra Practice (Changing the default intercept term)

When we modeled body mass by island when learning SLR. The default was to have the Biscoe island as the baseline (intercept) term. What if we want to change that?

There are many ways to do this. Using `mutate` and `factor`, change the intercept term to be the Dream island. Note how the estimates change in the model as a result.

```{r}
#| label: fct-relevel

linear_reg() |>
  set_engine("lm") |>
  fit(body_mass_g ~ island *flipper_length_mm, data = penguins) |>
  tidy()

penguins <- penguins |>
  mutate(island = factor(island, levels = c("Dream" , "Biscoe", "Torgersen")))

linear_reg() |>
  set_engine("lm") |>
  fit(body_mass_g ~ island * flipper_length_mm, data = penguins) |>
  tidy()
```
