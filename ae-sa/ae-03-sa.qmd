---
title: "Data Viz + Data Manipulation"
subtitle: "Suggested Answers"
format: html
editor: visual
---

::: callout-important
Go to the [course GitHub organization](https://github.com/sta199-summer-1) and locate the repo titled `ae-03-YOUR_GITHUB_USERNAME` to get started.

This AE is due Friday, May 26th at 11:59pm.
:::

## Packages

```{r}
#| label: load-packages
#| warning: false
#| message: false
#| echo: false




library(tidyverse)
library(palmerpenguins)
library(nycflights13)

```

Let's remind ourselves what the following code chunk labels are doing above:

label: load-packages - name of your code chunk warning: false - hide warnings message: false - hide messages echo: false - Code will not show up in PDF eval: false - Code will not run when you make PDF

## Data

These data were collected from 2007 - 2009 by Dr. Kristen Gorman with the Palmer Station Long Term Ecological Research Program, part of the US Long Term Ecological Research Network. The data were imported directly from the Environmental Data Initiative (EDI) Data Portal, and are available for use by CC0 license ("No Rights Reserved") in accordance with the Palmer Station Data Policy.

## Mapping Variables (Coding Warm Up)

Below, the researcher is trying to create a scatterplot between flipper length and bill length. They also want to color all the points red (for some reason).

Below, run the two sets of code. Why does the first set of code not run?

```{r}
 
penguins |>
  ggplot(
    aes(x = flipper_length_mm, y = bill_length_mm , color = "red")
  ) + 
  geom_point()


penguins |>
  ggplot(
    aes(x = flipper_length_mm, y = bill_length_mm)
  ) + 
  geom_point(color = "red")

```

**Add response**

## Plot Recreation

We can use multiple geoms on a single plot! Be deliberate about the order of plotting. Our task is to recreate the following image below. Hint: This plot uses `theme_minimal` and `scale_color_viridis_d(option = "D")`.

Note: Themes are a powerful way to customize the non-data components of your plots: i.e. titles, labels, fonts, background, gridlines, and legends: `theme()`. This is different than theme_minimal. Hint: pull up the help file for `theme()` and search for legend.position.

![](plot1.png){width="650" height="400" fig-align="center"}

1.  Make your own code chunk below

2.  Recreate the plot

Start your code chunk here. Make sure to give it an appropriate label:

```{r}
penguins |>
  ggplot(
    aes(x = body_mass_g , y = species, color = species)
  ) +
  labs(title = "Weight Distribution of Penguins",
       x = "Weight",
       y = "Species") +
  geom_point(position = "jitter") +
  geom_boxplot() +
  scale_color_viridis_d(option = "D") + 
  theme_minimal() +
  theme(legend.position = "none") 

```

Above, we made note to "be deliberate about the order of plotting." Let's show why. Switch the order of the geoms used above and re-run your code. What happened?

*Add Response*

# Data Wrangling

To demonstrate data wrangling we will use `flights`, a tibble in the **nycflights13** R package. It includes characteristics of all flights departing from New York City (JFK, LGA, EWR) in 2013.

## Tibble vs. data frame

A **tibble** is an opinionated version of the `R` data frame. In other words, all tibbles are data frames, but not all data frames are tibbles!

There are many differences between a tibble and a data frame. The main one is...

1.  When you print a tibble, the first ten rows and all of the columns that fit on the screen will display, along with the type of each column.

Let's look at the differences in the output when we type `flights` (tibble) in the console versus typing `cars` (data frame) in the console.

## The pipe (a review)

Before working with more data wrangling functions, let's formally introduce the pipe. The **pipe**, `|>`, is an operator (a tool) for passing information from one process to another. We will use `|>` mainly in data pipelines to pass the output of the previous line of code as the first input of the next line of code.

When reading code "in English", say "and then" whenever you see a pipe.

# Data wrangling with `dplyr`

**dplyr** is the primary package in the tidyverse for data wrangling. [Click here](https://dplyr.tidyverse.org/) for the dplyr reference page. [Click here](https://github.com/rstudio/cheatsheets/raw/master/data-transformation.pdf) for the dplyr cheatsheet.

Quick summary of key dplyr functions[^1]:

[^1]: From [dplyr vignette](https://dplyr.tidyverse.org/articles/dplyr.html)

**Rows:**

-   `filter()`:chooses rows based on column values.
-   `slice()`: chooses rows based on location.
-   `arrange()`: changes the order of the rows
-   `sample_n()`: take a random subset of the rows

**Columns:**

-   `select()`: changes whether or not a column is included.
-   `rename()`: changes the name of columns.
-   `mutate()`: changes the values of columns and creates new columns.

**Groups of rows:**

-   `summarise()`: collapses a group into a single row.
-   `count()`: count unique values of one or more variables.
-   `group_by()`: perform calculations separately for each value of a variable

# Activities

## `select()`

-   Demo: Make a data frame that only contains the variables `dep_delay` and `arr_delay`.

```{r}
#| label: select-vars

flights |>
  select(dep_delay, arr_delay)

```

-   Demo: Make a data frame that keeps every variable except `dep_delay`. Call the new data frame `new.data`

```{r}
#| label: exclude-vars

new.data <- flights |> 
  select(-dep_delay)

```

-   In the console, type `1:10` and hit enter. What happened?

-   Demo: Make a data frame that includes all variables between `year` through `dep_delay` (inclusive). These are all variables that provide information about the departure of each flight.

```{r}
#| label: include-range

flights |> 
  select(year:dep_delay)

```

-   Demo: Use the `select` helper `contains()` to make a data frame that includes the variables associated with the arrival, i.e., contains the string `"arr_"` in the name. Reminder: Thinking about code as **sentences** can help make nesting functions more intuitive.

Hint: Run `?contains` and click Select variables that match a pattern. Scroll down to the examples. Next answer the question below.

```{r}
#| label: arr-vars

flights |>
  select(contains("arr_"))

```

-   Review: Why is *arr\_*in quotes?

**Add response here**

This is a good time to render and push to GitHub. Let's go through this demonstration now. **This is how you will turn in your AEs for the summer session**

## `slice()`

-   Demo: Display the first five rows of the `flights` data frame.

```{r}
#| label: slice

flights |>
  slice(1:5)

```

-   Demo: Display the last two rows of the `flights` data frame. Hint: `n()` produces the number of the last row in the data set.

```{r}
#| label: last-two

flights |> 
  slice((n()-1):n())

# OR

flights |>
  slice_tail(n = 2)

```

## `arrange()`

-   Demo: Let's arrange the data by departure delay, so the flights with the **shortest** departure delays will be at the top of the data frame.

```{r}
#| label: arrange-delays

flights |>
  arrange(dep_delay)

```

-   Demo: Now let's arrange the data by descending departure delay, so the flights with the **longest** departure delays will be at the top. Hint, run `?desc` in the console.

```{r}
#| label: arrange-delays-desc

flights |>
  arrange(desc(dep_delay))

```

-   **Your turn (5 minutes):** Create a data frame that only includes the plane tail number (`tailnum`), carrier (`carrier`), and departure delay for the flight with the longest departure delay. What is the plane tail number (`tailnum`) for this flight?

```{r}
#| label: longest-delay

flights |>
  select(tailnum, carrier, dep_delay) |>
  arrange(desc(dep_delay)) |>
  slice(1) |>
  select(tailnum)
  
```
